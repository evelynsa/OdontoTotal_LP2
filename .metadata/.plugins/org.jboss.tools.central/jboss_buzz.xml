<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Apache Camel 3.1 - More camel-core optimizations coming (Part 3)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/d_w0EQzcH50/apache-camel-31-more-camel-core.html" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_clausibsen" scheme="searchisko:content:tags" /><category term="roadmap" scheme="searchisko:content:tags" /><author><name>Claus Ibsen</name></author><id>searchisko:content:id:jbossorg_blog-apache_camel_3_1_more_camel_core_optimizations_coming_part_3</id><updated>2020-02-12T14:05:48Z</updated><published>2020-02-12T14:05:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;I have previously blogged about the optimizations we are doing in the next Camel 3.1 release&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core.html"&gt;blog part 1&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core_30.html"&gt;blog part 2&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Today I wanted to give a short update on the latest development we have done, as we are closing down on being ready to build and release Camel 3.1 as early as end of this week or the following.&lt;br /&gt;&lt;br /&gt;Since part 2, we managed to find additional 10% reduction on object allocations during routing.&lt;br /&gt;&lt;br /&gt;We have also continued the effort of configuring Camel via source code generated configurers that performs direct Java method calls vs using java bean reflections. Now all components, data formats, languages, and EIP patterns is complete. Only in more advanced use-cases where configuration is based on nested complex objects that are dynamically configured would be outside the scope of the source code configures and Camel fallback to use reflection.&lt;br /&gt;&lt;br /&gt;We also found a way to optimize property placeholder resolution on EIPs to avoid using source code generated configurers which means that there are 200 classes less to load on the classpath, and about 90kb of memory is saved. This is great as these classes and memory were only used during bootstrap of Camel, and now they are all gone.&lt;br /&gt;&lt;br /&gt;We also managed to further modulaize camel-core, so JAXB and XML routes are optional.&lt;br /&gt;Even for XML routes (not Spring or Blueprint as they have their own DOM XML parser) we have created an alternative, fast and light-weight pull based parser. The camel-example-main-xml is using this and by comparing JAXB vs Camel XML then its 6x faster (approx 1500 millis vs 250) and loads 700 classes less than JAXB.&lt;br /&gt;&lt;br /&gt;However for non XML users (eg using Java DSL) then JAXB can be avoided on the classpath at all, and you can have tiny Camel applications, such as camel-example-main-tiny with the following dependency tree (&lt;b&gt;bold are Camel JARs;&amp;nbsp;&lt;/b&gt;the example uses the bean and timer components)&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;[INFO] org.apache.camel.example:camel-example-main-tiny:jar:3.1.0-SNAPSHOT&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;&lt;b&gt;[INFO] +- org.apache.camel:camel-main:jar:3.1.0-SNAPSHOT:compile&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;&lt;b&gt;[INFO] |&amp;nbsp; +- org.apache.camel:camel-api:jar:3.1.0-SNAPSHOT:compile&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;&lt;b&gt;[INFO] |&amp;nbsp; +- org.apache.camel:camel-base:jar:3.1.0-SNAPSHOT:compile&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;&lt;b&gt;[INFO] |&amp;nbsp; +- org.apache.camel:camel-core-engine:jar:3.1.0-SNAPSHOT:compile&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;&lt;b&gt;[INFO] |&amp;nbsp; +- org.apache.camel:camel-management-api:jar:3.1.0-SNAPSHOT:compile&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;&lt;b&gt;[INFO] |&amp;nbsp; +- org.apache.camel:camel-support:jar:3.1.0-SNAPSHOT:compile&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;&lt;b&gt;[INFO] |&amp;nbsp; \- org.apache.camel:camel-util:jar:3.1.0-SNAPSHOT:compile&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;&lt;b&gt;[INFO] +- org.apache.camel:camel-bean:jar:3.1.0-SNAPSHOT:compile&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;&lt;b&gt;[INFO] +- org.apache.camel:camel-timer:jar:3.1.0-SNAPSHOT:compile&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;[INFO] +- org.apache.logging.log4j:log4j-api:jar:2.13.0:compile&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;[INFO] +- ch.qos.logback:logback-core:jar:1.2.3:compile&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;[INFO] \- ch.qos.logback:logback-classic:jar:1.2.3:compile&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;[INFO]&amp;nbsp; &amp;nbsp; \- org.slf4j:slf4j-api:jar:1.7.30:compile&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: Courier New, Courier, monospace; font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;I ran this example with the profiler and configured it to use 10MB as max heap (-Xmx10M) and as the summary shows this can easily be done. About 5mb is used in the heap.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-ps-KFiZPWX8/XkQFccKVD0I/AAAAAAAACFE/ow6g11f_y-MwkZlVJihHOy9lGsAJsnOAQCLcBGAsYHQ/s1600/10mb-heap.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="378" data-original-width="959" height="156" src="https://1.bp.blogspot.com/-ps-KFiZPWX8/XkQFccKVD0I/AAAAAAAACFE/ow6g11f_y-MwkZlVJihHOy9lGsAJsnOAQCLcBGAsYHQ/s400/10mb-heap.png" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;There has also been a few other minor improvements to avoid using Camel 2.x based type converter scanning by default. This reduces a scan on the classpath.&lt;br /&gt;&lt;br /&gt;Okay its time to end this blog series and finish up the last bits so we can get Camel 3.1 released.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=pDnbDdBSPvk:BQL4WkBoZ80:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=pDnbDdBSPvk:BQL4WkBoZ80:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=pDnbDdBSPvk:BQL4WkBoZ80:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=pDnbDdBSPvk:BQL4WkBoZ80:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=pDnbDdBSPvk:BQL4WkBoZ80:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/ApacheCamel?a=pDnbDdBSPvk:BQL4WkBoZ80:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/ApacheCamel?i=pDnbDdBSPvk:BQL4WkBoZ80:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/ApacheCamel/~4/pDnbDdBSPvk" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/d_w0EQzcH50" height="1" width="1" alt=""/&gt;</content><summary>I have previously blogged about the optimizations we are doing in the next Camel 3.1 release blog part 1 blog part 2 Today I wanted to give a short update on the latest development we have done, as we are closing down on being ready to build and release Camel 3.1 as early as end of this week or the following. Since part 2, we managed to find additional 10% reduction on object allocations during ro...</summary><dc:creator>Claus Ibsen</dc:creator><dc:date>2020-02-12T14:05:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/ApacheCamel/~3/pDnbDdBSPvk/apache-camel-31-more-camel-core.html</feedburner:origLink></entry><entry><title>Podman for macOS (sort of)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/eMddeLOEPTw/" /><category term="Containers" /><category term="Operating System" /><category term="buildah" /><category term="os x" /><category term="Podman" /><category term="skopeo" /><author><name>Rarm Nagalingam</name></author><id>https://developers.redhat.com/blog/?p=675017</id><updated>2020-02-12T08:00:21Z</updated><published>2020-02-12T08:00:21Z</published><content type="html">&lt;p&gt;I have a problem. My daily laptop is a MacBook Pro, which is great unless you want to dual boot into Linux and develop on containers. While it is simple enough to install &lt;a href="https://developers.redhat.com/products/codeready-containers/overview" target="_blank" rel="noopener noreferrer"&gt;Red Hat CodeReady Containers&lt;/a&gt;, what I really needed was a way to run Buildah, Podman, and skopeo on macOS without having to water and feed a Linux VM.&lt;/p&gt; &lt;p&gt;Look no further: Podman-machine has somewhat solved this problem.&lt;/p&gt; &lt;h2&gt;Podman-machine&lt;/h2&gt; &lt;p&gt;Podman-machine starts a virtual machine that already streamlines the Podman, Buildah, and skopeo packages. The developers released two VM flavors: an in-memory Tiny Core and a Fedora version.&lt;/p&gt; &lt;p&gt;You have the option of compiling additional driver support for hypervisors like xhyve, but I would recommend VirtualBox as it seems to work more smoothly.&lt;/p&gt; &lt;h2&gt;Getting started&lt;/h2&gt; &lt;p&gt;My instructions are based on &lt;a href="https://github.com/boot2podman/machine" target="_blank" rel="noopener noreferrer"&gt;the official ones here&lt;/a&gt;. The guide also assumes you have VirtualBox already installed.&lt;/p&gt; &lt;p&gt;Start by downloading the latest &lt;code&gt;podman-machine&lt;/code&gt; binary. At the time of this writing, the latest release was v0.16:&lt;/p&gt; &lt;pre&gt;$ curl -L https://github.com/boot2podman/machine/releases/download/v0.16/podman-machine.darwin-amd64 --output /usr/local/bin/podman-machine chmod +x &lt;/pre&gt; &lt;h3&gt;Setting up your VM&lt;/h3&gt; &lt;p&gt;Then, create a &lt;code&gt;boot2podman&lt;/code&gt; VM. I am using a Fedora 31 virtual machine with 4GB of RAM, and I attached my local &lt;code&gt;~/Code&lt;/code&gt; directory to this VM.&lt;/p&gt; &lt;p&gt;I updated the image to Fedora 31 and allowed rootless image building. The image should make it &lt;a href="https://github.com/boot2podman/boot2podman-fedora-iso" target="_blank" rel="noopener noreferrer"&gt;to the official repo&lt;/a&gt;. In the meantime, I referenced the development release below:&lt;/p&gt; &lt;pre&gt;$ podman-machine create --virtualbox-boot2podman-url https://github.com/snowjet/boot2podman-fedora-iso/releases/download/d1bb19f/boot2podman-fedora.iso --virtualbox-memory="4096" --virtualbox-share-folder ~/Code:code fedbox &lt;/pre&gt; &lt;p&gt;You now have a VM with a persistent disk for container images, but it runs the OS in memory. You can log into the VM and view your shared directory at &lt;code&gt;/sf_code&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ podman-machine ssh fedbox ls /sf_code total 12 drwxrwx---. 1 root vboxsf 128 Jan 13 21:15 . dr-xr-xr-x. 18 root root 4096 Jan 14 22:42 .. drwxrwx---. 1 root vboxsf 480 Aug 28 05:40 container-proj &lt;/pre&gt; &lt;h3&gt;Setting up your container&lt;/h3&gt; &lt;p&gt;Now, let&amp;#8217;s run a container and communicate with it:&lt;/p&gt; &lt;pre&gt;$ podman-machine ssh fedbox $ podman run -p 8080:80/tcp --rm httpd Trying to pull docker.io/library/httpd... Getting image source signatures Copying blob 27298e4c749a done Copying blob 354e6904d655 done Copying blob 36412f6b2f6e done Copying blob 10e27104ba69 done Copying blob 8ec398bc0356 [======================================] 25.8MiB / 25.8MiB Copying config c2aa7e16ed [======================================] 7.2KiB / 7.2KiB Writing manifest to image destination Storing signatures ... [Thu Jan 16 01:28:19.051375 2020] [core:notice] [pid 1:tid 140000832345216] AH00094: Command line: 'httpd -D FOREGROUND' &lt;/pre&gt; &lt;p&gt;In another terminal, run:&lt;/p&gt; &lt;pre&gt;$ podman-machine ip fedbox 192.168.99.122 $ curl http://192.168.99.122:8080 It works! &lt;/pre&gt; &lt;p&gt;Finally, you can create containers on your Mac and communicate with them.&lt;/p&gt; &lt;h3&gt;Closing your workspace&lt;/h3&gt; &lt;p&gt;To stop and clean up your workspace, run:&lt;/p&gt; &lt;pre&gt;$ podman-machine stop fedbox $ podman-machine rm fedbox &lt;/pre&gt; &lt;p&gt;Now you can easily build, run, and push containers from your Mac.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F12%2Fpodman-for-macos-sort-of%2F&amp;#38;linkname=Podman%20for%20macOS%20%28sort%20of%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F12%2Fpodman-for-macos-sort-of%2F&amp;#38;linkname=Podman%20for%20macOS%20%28sort%20of%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F12%2Fpodman-for-macos-sort-of%2F&amp;#38;linkname=Podman%20for%20macOS%20%28sort%20of%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F12%2Fpodman-for-macos-sort-of%2F&amp;#38;linkname=Podman%20for%20macOS%20%28sort%20of%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F12%2Fpodman-for-macos-sort-of%2F&amp;#38;linkname=Podman%20for%20macOS%20%28sort%20of%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F12%2Fpodman-for-macos-sort-of%2F&amp;#38;linkname=Podman%20for%20macOS%20%28sort%20of%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F12%2Fpodman-for-macos-sort-of%2F&amp;#38;linkname=Podman%20for%20macOS%20%28sort%20of%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F12%2Fpodman-for-macos-sort-of%2F&amp;#038;title=Podman%20for%20macOS%20%28sort%20of%29" data-a2a-url="https://developers.redhat.com/blog/2020/02/12/podman-for-macos-sort-of/" data-a2a-title="Podman for macOS (sort of)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/12/podman-for-macos-sort-of/"&gt;Podman for macOS (sort of)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/eMddeLOEPTw" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I have a problem. My daily laptop is a MacBook Pro, which is great unless you want to dual boot into Linux and develop on containers. While it is simple enough to install Red Hat CodeReady Containers, what I really needed was a way to run Buildah, Podman, and skopeo on macOS without having to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/12/podman-for-macos-sort-of/"&gt;Podman for macOS (sort of)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">675017</post-id><dc:creator>Rarm Nagalingam</dc:creator><dc:date>2020-02-12T08:00:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/12/podman-for-macos-sort-of/</feedburner:origLink></entry><entry><title>Toward _FORTIFY_SOURCE parity between Clang and GCC</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GVirXANEwCc/" /><category term="C" /><category term="C++" /><category term="clang/LLVM" /><category term="_FORTIFY_SOURCE" /><category term="buffer overflow" /><category term="compatibility" /><category term="gcc" /><category term="glibc" /><author><name>Serge Guelton</name></author><id>https://developers.redhat.com/blog/?p=673947</id><updated>2020-02-11T08:00:39Z</updated><published>2020-02-11T08:00:39Z</published><content type="html">&lt;p&gt;GCC combined with glibc can detect instances of buffer overflow by standard C library functions. When a user passes the &lt;code&gt;-D_FORTIFY_SOURCE={1,2}&lt;/code&gt; &lt;em&gt;preprocessor&lt;/em&gt; flag and an optimization level greater or equal to &lt;code&gt;-O1&lt;/code&gt;, an alternate, &lt;em&gt;fortified&lt;/em&gt; implementation of the function is used when calling, say, &lt;code&gt;strcpy&lt;/code&gt;. Depending on the function and its inputs, this behavior may result in a compile-time error, or a runtime error triggered upon execution. (For more info on this feature, there&amp;#8217;s an &lt;a href="https://access.redhat.com/blogs/766093/posts/1976213" target="_blank" rel="noopener noreferrer"&gt;excellent blog post here&lt;/a&gt; on the subject).&lt;/p&gt; &lt;p&gt;What about the Clang plus glibc duo? This article digs through &lt;code&gt;-D_FORTIFY_SOURCE&lt;/code&gt; usage and discuss the patches applied to Clang to achieve feature parity.&lt;/p&gt; &lt;h1&gt;First glance&lt;/h1&gt; &lt;p&gt;Let&amp;#8217;s look at &lt;code&gt;-D_FORTIFY_SOURCE&lt;/code&gt; through the compiler portability prism. As this feature relies on a preprocessor definition, it should only involve preprocessor selection. Compatibility should come for free, right?&lt;/p&gt; &lt;p&gt;Not quite. Following the definitions in the &lt;code&gt;glibc&lt;/code&gt; headers, one quickly spots compiler-specific function calls that are relied on to implement the security check. A &lt;a href="https://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=29727" target="_blank" rel="noopener noreferrer"&gt;careful study&lt;/a&gt; of the headers leads to the following builtins being used at some point in the headers, included solely when &lt;code&gt;-D_FORTIFY_SOURCE&lt;/code&gt; is on:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;__builtin_constant_p&lt;/li&gt; &lt;li&gt;__builtin_object_size&lt;/li&gt; &lt;li&gt;__builtin___memcpy_chk&lt;/li&gt; &lt;li&gt;__builtin___memmove_chk&lt;/li&gt; &lt;li&gt;__builtin___mempcpy_chk&lt;/li&gt; &lt;li&gt;__builtin___memset_chk&lt;/li&gt; &lt;li&gt;__builtin___snprintf_chk&lt;/li&gt; &lt;li&gt;__builtin___sprintf_chk&lt;/li&gt; &lt;li&gt;__builtin___stpcpy_chk&lt;/li&gt; &lt;li&gt;__builtin___strcat_chk&lt;/li&gt; &lt;li&gt;__builtin___strcpy_chk&lt;/li&gt; &lt;li&gt;__builtin___strncat_chk&lt;/li&gt; &lt;li&gt;__builtin___strncpy_chk&lt;/li&gt; &lt;li&gt;__builtin___vsnprintf_chk&lt;/li&gt; &lt;li&gt;__builtin___vsprintf_chk&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Those are the compiler &lt;em&gt;builtins&lt;/em&gt;, as hinted by the &lt;code&gt;__builtin__&lt;/code&gt; prefix, which means that either the compiler knows them and provides its own implementation/handling, or the compilation (or linking) process will fail. So in order to support &lt;code&gt;-D_FORTIFY_SOURCE&lt;/code&gt;, a compiler must support these builtins. All of them (except &lt;code&gt;__builtin_constant_p&lt;/code&gt; and &lt;code&gt;__builtin_object_size&lt;/code&gt;) are suffixed by &lt;code&gt;_chk&lt;/code&gt;, which suggests they are hardened versions of the corresponding function from libc.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s take a deeper look at these functions.&lt;/p&gt; &lt;h1&gt;Required compiler builtins&lt;/h1&gt; &lt;p&gt;The following compiler builtins are required for &lt;code&gt;-D_FORTIFY_SOURCE&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;&lt;code&gt;__builtin_object_size(obj, type)&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;This builtin function is complex. The interested reader may want to check out its &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Object-Size-Checking.html" target="_blank" rel="noopener noreferrer"&gt;online documentation&lt;/a&gt;. As a short summary, let&amp;#8217;s assume that this function tries to compute the allocated size of &lt;code&gt;obj&lt;/code&gt; at compile time, and then returns it. If this process fails, it returns &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;type&lt;/code&gt; argument controls details of this function&amp;#8217;s semantics. The following definition is made available in &lt;code&gt;cdefs.h&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;#define __bos(ptr) __builtin_object_size (ptr, __USE_FORTIFY_LEVEL &amp;#62; 1)&lt;/pre&gt; &lt;h3&gt;&lt;code&gt;__builtin_constant_p(obj)&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;This function returns &lt;code&gt;1&lt;/code&gt; if the value of &lt;code&gt;obj&lt;/code&gt; is known at compile time (after optimizations) and returns &lt;code&gt;0&lt;/code&gt; otherwise. The following code, extracted from &lt;code&gt;stdio2.h&lt;/code&gt; in the &lt;code&gt;glibc&lt;/code&gt; version 2.30, showcases an example of usage:&lt;/p&gt; &lt;pre&gt;__fortify_function __wur char * fgets (char *__restrict __s, int __n, FILE *__restrict __stream) { if (__bos (__s) != (size_t) -1) { if (!__builtin_constant_p (__n) || __n &amp;#60;= 0) return __fgets_chk (__s, __bos (__s), __n, __stream); if ((size_t) __n &amp;#62; __bos (__s)) return __fgets_chk_warn (__s, __bos (__s), __n, __stream); } return __fgets_alias (__s, __n, __stream); } //* &lt;/pre&gt; &lt;p&gt;This code reads as:&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;If we can compute the basic object size (bos) of the first parameter of &lt;code&gt;fgets&lt;/code&gt;, then if the second parameter is not known at compile time, use the &lt;code&gt;__fgets_chk&lt;/code&gt; function. If the second parameter is greater than the object size, then use &lt;code&gt;__fgets_chk_warn&lt;/code&gt;. Otherwise, we know (at compile time) that the call is secure and the original function is called through &lt;code&gt;__fgets_alias&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;&lt;code&gt;__builtin___memcpy_chk(dest, src, n, dest_size)&lt;/code&gt;&lt;/h3&gt; &lt;p&gt;The extra &lt;code&gt;dest_size&lt;/code&gt; argument is used for comparison with &lt;code&gt;n&lt;/code&gt;. &lt;code&gt;dest_size&lt;/code&gt; can be &lt;code&gt;-1&lt;/code&gt;, which means its value is unknown at compile time. It can have a positive value, in which case it means that &amp;#8220;the number of allocated bytes remaining after the location pointed by &lt;code&gt;dest&lt;/code&gt; is &lt;code&gt;dest_size&lt;/code&gt;.&amp;#8221; When &lt;code&gt;dest_size&lt;/code&gt;is positive and lower than &lt;code&gt;n&lt;/code&gt;, an error is emitted either at compile time or at runtime.&lt;/p&gt; &lt;p&gt;The other &lt;code&gt;__bultin__*_chk&lt;/code&gt; builtins do similar checks based on the destination buffer&amp;#8217;s compiler-computed object size and the actual copy size.&lt;/p&gt; &lt;h1&gt;Clang compatibility&lt;/h1&gt; &lt;p&gt;After a quick check of the builtins supported by Clang, it turns out that all the builtins required by &lt;code&gt;-D_FORTIFY_SOURCE=2&lt;/code&gt; are supported by Clang. That&amp;#8217;s a nice property: It means that you can pass that pre-processor flag to Clang when compiling your C (or C++) application and it compiles just fine. As a matter of fact, Firefox already &lt;a href="https://searchfox.org/mozilla-central/source/build/moz.configure/toolchain.configure#1540-1551" target="_blank" rel="noopener noreferrer"&gt;builds with Clang and that flag&lt;/a&gt;, so it indeed &lt;em&gt;compiles&lt;/em&gt; fine.&lt;/p&gt; &lt;p&gt;But do we get the extra protection? After a deeper look at Clang&amp;#8217;s source code, the answer is more nuanced. Based on the body of &lt;code&gt;&lt;a href="https://github.com/llvm/llvm-project/blob/release/9.x/clang/lib/Sema/SemaChecking.cpp#L315" target="_blank" rel="noopener noreferrer"&gt;Sema::checkFortifiedBuiltinMemoryFunction&lt;/a&gt;&lt;/code&gt;, the check is only performed if both the size argument and the object size are known at compile time. Otherwise, no checks are performed. This sequence is different from the GCC behavior, where a call to &lt;code&gt;__memcpy_chk&lt;/code&gt; is generated in that case.&lt;/p&gt; &lt;p&gt;A look at &lt;a href="https://godbolt.org/z/xXfpNZ" target="_blank" rel="noopener noreferrer"&gt;this snippet&lt;/a&gt; illustrates GCC&amp;#8217;s behavior. The size argument of the &lt;code&gt;memcpy&lt;/code&gt; call is a runtime value, but both the destination and the source argument have a size known at compile time. GCC internal representation shows a call to &lt;code&gt;__builtin___memcpy_chk&lt;/code&gt; lowered to &lt;code&gt;__memcpy_chk&lt;/code&gt;. On the other hand, Clang just &lt;a href="https://godbolt.org/z/TBDbY6" target="_blank" rel="noopener noreferrer"&gt;issues a regular call to &lt;code&gt;memcpy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;h1&gt;Patching Clang&lt;/h1&gt; &lt;p&gt;Digging into Clang&amp;#8217;s code reveals that whenever it meets a call to &lt;code&gt;memcpy&lt;/code&gt;, the call is replaced by a call to &lt;a href="http://llvm.org/docs/LangRef.html#llvm-memcpy-intrinsic" target="_blank" rel="noopener noreferrer"&gt;LLVM&amp;#8217;s builtin &lt;code&gt;llvm.memcpy&lt;/code&gt;&lt;/a&gt;. Unfortunately, what &lt;code&gt;-D_FORTIFY_SOURCE={1,2}&lt;/code&gt; does is unguard an inline definition of &lt;code&gt;memcpy&lt;/code&gt; with the fortified implementation. And that&amp;#8217;s the implementation Clang should use. This &lt;a href="https://reviews.llvm.org/D71082" target="_blank" rel="noopener noreferrer"&gt;patch&lt;/a&gt; implements this extra behavior, with the mandatory extra tests.&lt;/p&gt; &lt;p&gt;To validate the whole approach, I wrote a &lt;a href="https://github.com/serge-sans-paille/fortify-test-suite/" target="_blank" rel="noopener noreferrer"&gt;minimal test suite&lt;/a&gt; for fortifying compilers. GCC passes it &lt;em&gt;by design&lt;/em&gt;, and Clang 9 doesn&amp;#8217;t. However, using the top-of-tree version of Clang (&lt;code&gt;346de9b6&lt;/code&gt; as of this writing), the test suite now passes just fine:&lt;/p&gt; &lt;pre&gt;(sh) make check-gcc [...] ===== GCC OK ===== (sh) PATH=/path/to/clang:$PATH make check-clang [...] ===== CLANG OK ===== &lt;/pre&gt; &lt;h1&gt;Conclusion&lt;/h1&gt; &lt;p&gt;When aiming at feature parity, the devil is in the details. In the case of &lt;code&gt;-D_FORTIFY_SOURCE&lt;/code&gt;, Clang seemingly supported the feature. We are now one step further toward feature parity.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F11%2Ftoward-_fortify_source-parity-between-clang-and-gcc%2F&amp;#38;linkname=Toward%20_FORTIFY_SOURCE%20parity%20between%20Clang%20and%20GCC" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F11%2Ftoward-_fortify_source-parity-between-clang-and-gcc%2F&amp;#38;linkname=Toward%20_FORTIFY_SOURCE%20parity%20between%20Clang%20and%20GCC" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F11%2Ftoward-_fortify_source-parity-between-clang-and-gcc%2F&amp;#38;linkname=Toward%20_FORTIFY_SOURCE%20parity%20between%20Clang%20and%20GCC" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F11%2Ftoward-_fortify_source-parity-between-clang-and-gcc%2F&amp;#38;linkname=Toward%20_FORTIFY_SOURCE%20parity%20between%20Clang%20and%20GCC" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F11%2Ftoward-_fortify_source-parity-between-clang-and-gcc%2F&amp;#38;linkname=Toward%20_FORTIFY_SOURCE%20parity%20between%20Clang%20and%20GCC" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F11%2Ftoward-_fortify_source-parity-between-clang-and-gcc%2F&amp;#38;linkname=Toward%20_FORTIFY_SOURCE%20parity%20between%20Clang%20and%20GCC" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F11%2Ftoward-_fortify_source-parity-between-clang-and-gcc%2F&amp;#38;linkname=Toward%20_FORTIFY_SOURCE%20parity%20between%20Clang%20and%20GCC" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F11%2Ftoward-_fortify_source-parity-between-clang-and-gcc%2F&amp;#038;title=Toward%20_FORTIFY_SOURCE%20parity%20between%20Clang%20and%20GCC" data-a2a-url="https://developers.redhat.com/blog/2020/02/11/toward-_fortify_source-parity-between-clang-and-gcc/" data-a2a-title="Toward _FORTIFY_SOURCE parity between Clang and GCC"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/11/toward-_fortify_source-parity-between-clang-and-gcc/"&gt;Toward _FORTIFY_SOURCE parity between Clang and GCC&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GVirXANEwCc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;GCC combined with glibc can detect instances of buffer overflow by standard C library functions. When a user passes the -D_FORTIFY_SOURCE={1,2} preprocessor flag and an optimization level greater or equal to -O1, an alternate, fortified implementation of the function is used when calling, say, strcpy. Depending on the function and its inputs, this behavior may result [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/11/toward-_fortify_source-parity-between-clang-and-gcc/"&gt;Toward _FORTIFY_SOURCE parity between Clang and GCC&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">673947</post-id><dc:creator>Serge Guelton</dc:creator><dc:date>2020-02-11T08:00:39Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/11/toward-_fortify_source-parity-between-clang-and-gcc/</feedburner:origLink></entry><entry><title>Installing Kubeflow v0.7 on OpenShift 4.2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/KDXuwXzLVJc/" /><category term="Containers" /><category term="Kubernetes" /><category term="Service Mesh" /><category term="CodeReady Containers" /><category term="istio" /><category term="Kubeflow" /><category term="Open Data Hub" /><category term="openshift" /><author><name>Juana Nakfour</name></author><id>https://developers.redhat.com/blog/?p=679917</id><updated>2020-02-10T08:00:14Z</updated><published>2020-02-10T08:00:14Z</published><content type="html">&lt;p&gt;As part of the &lt;a href="http://opendatahub.io/" target="_blank" rel="noopener noreferrer"&gt;Open Data Hub&lt;/a&gt; project, we see potential and value in the Kubeflow project, so we dedicated our efforts to enable Kubeflow on &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;. We decided to use Kubeflow 0.7 as that was the latest released version at the time this work began. The work included adding new installation scripts that provide all of the necessary changes such as permissions for service accounts to run on OpenShift.&lt;/p&gt; &lt;p&gt;The installation of Kubeflow is limited to the following components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Central dashboard&lt;/li&gt; &lt;li&gt;Jupyterhub&lt;/li&gt; &lt;li&gt;Katib&lt;/li&gt; &lt;li&gt;Pipelines&lt;/li&gt; &lt;li&gt;Pytorch, tf-jobs (training)&lt;/li&gt; &lt;li&gt;Seldon (serving)&lt;/li&gt; &lt;li&gt;Istio&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;All of the new fixes and features will be proposed upstream to the Kubeflow project in the near future.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;To install Kubeflow on OpenShift, there are prerequisites regarding the platform and the tools.&lt;/p&gt; &lt;h3&gt;Platform&lt;/h3&gt; &lt;p&gt;To run this installation, OpenShift is needed as a platform. You can use either OpenShift 4.2 or &lt;a href="https://developers.redhat.com/products/codeready-containers/overview"&gt;Red Hat CodeReady Containers&lt;/a&gt; (CRC). If you choose OpenShift 4.2, all that you need is an available OpenShift 4.2 cluster. Or, you can try a cluster on &lt;a href="https://try.openshift.com/" target="_blank" rel="noopener noreferrer"&gt;try.openshift.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you choose CodeReady Containers, you need a CRC-generated OpenShift cluster. Here are the recommended specifications:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;16GB RAM&lt;/li&gt; &lt;li&gt;6 CPUs&lt;/li&gt; &lt;li&gt;45GB disk space&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The minimum specifications are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;10GB RAM&lt;/li&gt; &lt;li&gt;6 CPUs&lt;/li&gt; &lt;li&gt;30GB disk space (the default for CRC)&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: At the minimum specs, the CRC OpenShift cluster might be unresponsive for approximately 20 minutes while the Kubeflow components are being deployed.&lt;/p&gt; &lt;p&gt;When installing Kubeflow on a CRC cluster, there is an extra overlay (named &amp;#8220;crc&amp;#8221;) to enable the metadata component in &lt;code&gt;kfctl_openshift.yaml&lt;/code&gt;. This overlay is commented out by default. Uncomment the overlay to enable it.&lt;/p&gt; &lt;h3&gt;Tools&lt;/h3&gt; &lt;p&gt;The installation tool &lt;code&gt;kfctl&lt;/code&gt; is needed to install/uninstall Kubeflow. Download the tool from &lt;a href="https://github.com/kubeflow/kubeflow/releases/" target="_blank" rel="noopener noreferrer"&gt;GitHub&lt;/a&gt;. Version 0.7.0 is required for this installation.&lt;/p&gt; &lt;h2&gt;Installing Kubeflow with Istio enabled&lt;/h2&gt; &lt;p&gt;As noted earlier, we added a KFDef file to specifically install Kubeflow on OpenShift and included fixes for different components. To install Kubeflow 0.7 on OpenShift 4.2 please follow the steps below. It is assumed that this installation will run on an OpenShift 4.2 cluster:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Clone the &lt;code&gt;opendatahub-manifest&lt;/code&gt; fork repo, which defaults to the branch &lt;code&gt;v0.7.0-branch-openshift&lt;/code&gt;:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ git clone https://github.com/opendatahub-io/manifests.git $ cd manifests&lt;/pre&gt; &lt;ol start="2"&gt; &lt;li&gt;Install using the OpenShift configuration file and the locally downloaded manifests, since at the time of writing we ran into this Kubeflow &lt;a href="https://github.com/kubeflow/kubeflow/issues/4678" target="_blank" rel="noopener noreferrer"&gt;bug&lt;/a&gt; that would not allow downloading the manifests during a build process:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ sed -i 's#uri: .*#uri: '$PWD'#' ./kfdef/kfctl_openshift.yaml $ kfctl build --file=kfdef/kfctl_openshift.yaml $ kfctl apply --file=./kfdef/kfctl_openshift.yaml&lt;/pre&gt; &lt;ol start="3"&gt; &lt;li&gt;Verify your installation:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ oc get pods&lt;/pre&gt; &lt;ol start="4"&gt; &lt;li&gt;Launch the Kubeflow portal:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ oc get routes -n istio-system istio-ingressgateway -o jsonpath='http://{.spec.host}/' http://&amp;#60;istio ingress route&amp;#62;/&lt;/pre&gt; &lt;h2&gt;Deleting a Kubeflow installation&lt;/h2&gt; &lt;p&gt;To delete a Kubeflow installation, follow these steps:&lt;/p&gt; &lt;pre&gt;$ kfctl delete --file=./kfdef/&amp;#60;kfctl file name&amp;#62;.yaml $ rm -rf kfdef/kustomize/ $ oc delete mutatingwebhookconfigurations.admissionregistration.k8s.io --all $ oc delete validatingwebhookconfigurations.admissionregistration.k8s.io --all $ oc delete namespace istio-system&lt;/pre&gt; &lt;h2&gt;Kubeflow components&lt;/h2&gt; &lt;p&gt;To enable the installation of Kubeflow 0.7 on OpenShift 4.2, we added features and fixes to alleviate the installation issues we encountered. The following is a list of components along with a description of the changes and usage examples.&lt;/p&gt; &lt;h3&gt;OpenShift KFDef&lt;/h3&gt; &lt;p&gt;KFDef is a specification designed to control the provisioning and management of Kubeflow deployment. This spec is generally distributed in YAML format and follows a pattern of custom resources popular in Kubernetes to extend the platform. With the upcoming addition of Kubeflow Operator, KFDef is becoming the custom resource used for Kubeflow deployment and lifecycle management.&lt;/p&gt; &lt;p&gt;KFDef is built on top of &lt;a href="https://kustomize.io/" target="_blank" rel="noopener noreferrer"&gt;Kustomize&lt;/a&gt;, which is a Kubernetes-native configuration management system. To deploy Kubeflow to OpenShift, we had to create a new KFDef YAML file that customizes the deployment manifests of Kubeflow components for OpenShift. With Kustomize as a configuration management layer for every component, it was necessary to add OpenShift-specific Kustomize overlays (patches applied to the default set of resource manifests when an overlay is selected).&lt;/p&gt; &lt;p&gt;Take a look at the OpenShift-specific KFDef file used in the deployment steps above in the &lt;a href="https://github.com/opendatahub-io/manifests/blob/v0.7-branch-openshift/kfdef/kfctl_openshift.yaml" target="_blank" rel="noopener noreferrer"&gt;opendatahub-io/manifests&lt;/a&gt; repository.&lt;/p&gt; &lt;h3&gt;Central dashboard&lt;/h3&gt; &lt;p&gt;The central dashboard works out of the box, provided that you access the Kubeflow web UI using the route for &lt;code&gt;istio-ingressgateway&lt;/code&gt; in the &lt;code&gt;istio-system&lt;/code&gt; namespace.&lt;/p&gt; &lt;p&gt;Upon first accessing the web UI, you will be prompted to create a Kubeflow user namespace. This is a one-time action for creating a single namespace. If you want to make additional namespaces accessible for Kubeflow deployment of notebook servers, Pipelines, etc., you can create a Kubeflow &lt;a href="https://www.kubeflow.org/docs/other-guides/multi-user-overview/#manual-profile-creation" target="_blank" rel="noopener noreferrer"&gt;profile&lt;/a&gt;. By default, the central dashboard does not have authentication enabled.&lt;/p&gt; &lt;h3&gt;Jupyter controller&lt;/h3&gt; &lt;p&gt;We are using three Jupyter controller customizations: a custom notebook controller, a custom profile controller, and a custom notebook image. Let&amp;#8217;s take a look at each.&lt;/p&gt; &lt;h4&gt;Custom notebook controller&lt;/h4&gt; &lt;p&gt;We are using a customized notebook controller to avoid the default behavior of setting &lt;code&gt;fsGroup: 100&lt;/code&gt; in the stateful set that is created when spawning a notebook. That value would require a special security context restraint (SCC) for the service account in OpenShift. To further complicate matters, that SCC would need to be granted to a service account that is created only when the profile is created, so it’s not something that can be done during installation.&lt;/p&gt; &lt;p&gt;Related links:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/kubeflow/kubeflow/issues/4617" target="_blank" rel="noopener noreferrer"&gt;The related upstream issue&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="http://quay.io/kubeflow/notebook-controller:v0.7.0" target="_blank" rel="noopener noreferrer"&gt;The repository for this controller image&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/crobby/kubeflow/tree/openshift-fixes" target="_blank" rel="noopener noreferrer"&gt;The source is here&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Custom profile controller&lt;/h4&gt; &lt;p&gt;We are using a customized profile controller to avoid the default behavior of newly created profiles having the label &lt;code&gt;istio-injection: enabled&lt;/code&gt;. That label causes the container to attempt to start an &lt;code&gt;istio-init&lt;/code&gt; container that, in turn, tries to use &lt;code&gt;iptables&lt;/code&gt;, which is not available in OpenShift 4.x. That init container will fail and cause the notebook start to fail.&lt;/p&gt; &lt;p&gt;Related links:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/kubeflow/kubeflow/issues/4566" target="_blank" rel="noopener noreferrer"&gt;The related upstream issue&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://quay.io/repository/kubeflow/profile-controller?tag=v0.7.0&amp;#38;tab=tags" target="_blank" rel="noopener noreferrer"&gt;The repository for the controller image&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/crobby/kubeflow/tree/openshift-fixes" target="_blank" rel="noopener noreferrer"&gt;The source is here&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Custom notebook image&lt;/h4&gt; &lt;p&gt;We also added our own &lt;a href="http://quay.io/kubeflow/tf-notebook-image" target="_blank" rel="noopener noreferrer"&gt;custom notebook image&lt;/a&gt;, which is prepopulated in the image selection dropdown. This image provides filesystem permissions in the &lt;code&gt;/home/jovyan&lt;/code&gt; directory. It offers &lt;a href="https://github.com/kubeflow/kubeflow/pull/4537" target="_blank" rel="noopener noreferrer"&gt;the functionality described here&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Katib&lt;/h3&gt; &lt;p&gt;Katib suffered two main problems. The first was not being able to run cleanly as an unprivileged user (&lt;a href="https://github.com/kubeflow/katib/pull/960" target="_blank" rel="noopener noreferrer"&gt;#960&lt;/a&gt;, &lt;a href="https://github.com/kubeflow/katib/pull/962" target="_blank" rel="noopener noreferrer"&gt;#962&lt;/a&gt;, &lt;a href="https://github.com/kubeflow/katib/pull/967" target="_blank" rel="noopener noreferrer"&gt;#967&lt;/a&gt;). The second is that it was damaging a generated security context in a pod by mutating the pod (&lt;a href="https://github.com/kubeflow/katib/pull/964" target="_blank" rel="noopener noreferrer"&gt;#964&lt;/a&gt;). Both have been fixed in upstream Katib repositories and Katib now runs without issues on OpenShift.&lt;/p&gt; &lt;p&gt;The second &lt;a href="https://github.com/kubeflow/katib/pull/964" target="_blank" rel="noopener noreferrer"&gt;issue&lt;/a&gt;, in particular, is a pattern common in applications relying on mutating webhooks where part of the mutation is adding a sidecar container to the pod that is being deployed. If the new container does not have an initialized security context, the pod admission policy controller will prevent its deployment. We have seen the same issue in the &lt;a href="https://github.com/kubeflow/kfserving/pull/613" target="_blank" rel="noopener noreferrer"&gt;KFServing component&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Pipelines&lt;/h3&gt; &lt;p&gt;To get Kubeflow Pipelines working on OpenShift, we had to specify the &lt;code&gt;k8sapi&lt;/code&gt; executor for Argo because OpenShift 4.2 does not include a Docker daemon and CLI. Instead, it uses &lt;a href="https://www.redhat.com/en/blog/red-hat-openshift-container-platform-4-now-defaults-cri-o-underlying-container-engine" target="_blank" rel="noopener noreferrer"&gt;CRI-O&lt;/a&gt; as the container engine by default. We also had to add the finalizers to the workflow permissions for OpenShift to be able to set owner references.&lt;/p&gt; &lt;p&gt;This practice allows running YAML-based Pipelines that conform to Argo’s specification regarding &lt;code&gt;k8sapi&lt;/code&gt; Pipelines execution, specifically for the condition of saving params and artifacts in volumes (such as &lt;code&gt;emtpyDir&lt;/code&gt;) and not the path that is part of the base image layer (for example, &lt;code&gt;/tmp&lt;/code&gt;). This specific requirement rendered all example Kubeflow Python Pipelines with errors. To test your Pipelines, use the fraud detection Pipelines provided in &lt;a href="https://developers.redhat.com/blog/2019/12/16/ai-ml-pipelines-using-open-data-hub-and-kubeflow-on-red-hat-openshift/"&gt;this article&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For &lt;code&gt;minio&lt;/code&gt; installation, we also created a service account and gave that account permission to run as &lt;code&gt;anyuid&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Training&lt;/h3&gt; &lt;p&gt;For training, we had to make changes for two of the apps: PyTorch and TensorFlow jobs (tf-jobs).&lt;/p&gt; &lt;h4&gt;PyTorch&lt;/h4&gt; &lt;p&gt;For PyTorch, we did not have to make any changes to the component. However, we did have to make changes to the Dockerfile of one of the examples found &lt;a href="https://github.com/kubeflow/pytorch-operator/tree/master/examples/mnist" target="_blank" rel="noopener noreferrer"&gt;here&lt;/a&gt;. We had to add the required folders and permissions to the Dockerfile by doing the following to run the example MNIST test:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Change the Dockerfile to include the following:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;FROM pytorch/pytorch:1.0-cuda10.0-cudnn7-runtime RUN pip install tensorboardX==1.6.0 RUN chmod 777 /var WORKDIR /var ADD mnist.py /var RUN mkdir /data RUN chmod 777 /data ENTRYPOINT ["python", "/var/mnist.py"]&lt;/pre&gt; &lt;ol start="2"&gt; &lt;li&gt;Build and push the Dockerfile to your registry:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;podman build -f Dockerfile -t &amp;#60;your registry name&amp;#62;/pytorch-dist-mnist-test:2.0 ./ podman push &amp;#60;your registry name&amp;#62;/pytorch-dist-mnist-test:2.0&lt;/pre&gt; &lt;ol start="3"&gt; &lt;li&gt;Add the registry image URL to the installation YAML file. We tested this setup without GPU and our file is the following:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;apiVersion: "kubeflow.org/v1" kind: "PyTorchJob" metadata: name: "pytorch-dist-mnist-gloo" spec: pytorchReplicaSpecs: Master: replicas: 1 restartPolicy: OnFailure template: spec: containers: - name: pytorch image: &amp;#60;your registry name&amp;#62;/pytorch-dist-mnist-test:2.0&amp;#60; args: ["--backend", "gloo"] # Comment out the below resources to use the CPU. resources: {} Worker: replicas: 1 restartPolicy: OnFailure template: spec: containers: - name: pytorch image: &amp;#60;your registry name&amp;#62;/pytorch-dist-mnist-test:2.0 args: ["--backend", "gloo"] # Comment out the below resources to use the CPU. resources: {}&lt;/pre&gt; &lt;ol start="4"&gt; &lt;li&gt;Create a PyTorch job by running the command&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;oc create -f v1/&amp;#60;filename.yaml&amp;#62;&lt;/pre&gt; &lt;ol start="5"&gt; &lt;li&gt;Check that the worker and master PyTorch pods are running with no errors.&lt;/li&gt; &lt;/ol&gt; &lt;h4&gt;Tf-jobs&lt;/h4&gt; &lt;p&gt;To get TF-jobs training working on OpenShift we had to add the &lt;code&gt;tfjob/finalizers&lt;/code&gt; resource for the &lt;code&gt;tf-job-operator&lt;/code&gt; ClusterRole for OpenShift to be able to set owner references. Follow these steps to run the example MNIST training job:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Run:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ git clone https://github.com/kubeflow/tf-operator $ cd tf-operator/examples/v1/mnist_with_summaries&lt;/pre&gt; &lt;ol start="2"&gt; &lt;li&gt;Create the &lt;code&gt;PersisentVolumeClaim&lt;/code&gt; shown below (we did have to change the &lt;code&gt;acceddModes&lt;/code&gt; to &lt;code&gt;RedWriteOnce&lt;/code&gt; for our cluster):&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;apiVersion: v1 kind: PersistentVolumeClaim metadata: name: tfevent-volume namespace: kubeflow labels:  type: local app: tfjob spec: accessModes: - ReadWriteOnce resources: requests: storage: 10Gi&lt;/pre&gt; &lt;ol start="3"&gt; &lt;li&gt;Run:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ oc apply -f tfevent-volume/&amp;#60;new pvc filename&amp;#62;.yaml $ oc apply -f tf_job_mnist.yaml $ oc describe tfjob mnist Events: Type    Reason                 Age From Message ----    ------                 ---- ---- ------- Normal  SuccessfulCreatePod      12m tf-operator Created pod: mnist-worker-0 Normal  SuccessfulCreateService  12m tf-operator Created service: mnist-worker-0 Normal  ExitedWithCode           11m tf-operator Pod: kubeflow.mnist-worker-0 exited with code 0 Normal  TFJobSucceeded           11m tf-operator TFJob mnist successfully completed.&lt;/pre&gt; &lt;h3&gt;Serving&lt;/h3&gt; &lt;p&gt;For serving, we had to make changes for one of the apps: Seldon&lt;/p&gt; &lt;h4&gt;Seldon&lt;/h4&gt; &lt;p&gt;To get Seldon to work on OpenShift we had to delete the &amp;#8220;8888&amp;#8221; UID value assigned to the engine container that is part of a served model pod. This value dictated that every time a model is served, its engine controller container UID was assigned the value &amp;#8220;8888,&amp;#8221; but that value is not within the allowed range of UID values in OpenShift.&lt;/p&gt; &lt;p&gt;For a quick example to try this issue out for yourself, here is an example fraud detection model:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Create a Seldon deployment YAML file using the following example:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;{ "apiVersion": "machinelearning.seldon.io/v1alpha2", "kind": "SeldonDeployment", "metadata": { "labels": { "app": "seldon" }, "name": "modelfull", "namespace": "kubeflow" }, "spec": { "annotations": { "project_name": "seldon", "deployment_version": "0.1" }, "name": "modelfull", "oauth_key": "oauth-key", "oauth_secret": "oauth-secret", "predictors": [ { "componentSpecs": [{ "spec": { "containers": [ { "image": "nakfour/modelfull", "imagePullPolicy": "Always", "name": "modelfull", "resources": { "requests": { "memory": "10Mi" } } } ], "terminationGracePeriodSeconds": 40 } }], "graph": { "children": [], "name": "modelfull", "endpoint": { "type" : "REST" }, "type": "MODEL" }, "name": "modelfull", "replicas": 1, "annotations": { "predictor_version" : "0.1" } } ] } }&lt;/pre&gt; &lt;ol start="2"&gt; &lt;li&gt;Install this configuration by running:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;$ oc create -f "filename.yaml"&lt;/pre&gt; &lt;ol start="3"&gt; &lt;li&gt;Verify that there is a pod that includes the name &lt;code&gt;modelfull&lt;/code&gt; running.&lt;/li&gt; &lt;li&gt;Verify that there is a virtual service that includes the name &lt;code&gt;modelfull&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;From a terminal, send a &lt;em&gt;predict request&lt;/em&gt; to the model using this example &lt;code&gt;curl&lt;/code&gt; command:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;curl -X POST -H 'Content-Type: application/json' -d '{"strData": "0.365194527642578,0.819750231339882,-0.5927999453145171,-0.619484351930421,-2.84752569239798,1.48432160780265,0.499518887687186,72.98"}' http://"Insert istio ingress domain name"/seldon/kubeflow/modelfull/api/v0.1/predictions&lt;/pre&gt; &lt;h3&gt;Istio&lt;/h3&gt; &lt;p&gt;Installing the default Istio provided with Kubeflow 0.7 required adding a route to the Istio ingress gateway service and the &lt;code&gt;anyuid&lt;/code&gt; security context. These additions give Istio permission to run as a privileged user for the multiple service accounts used by Istio&amp;#8217;s components.&lt;/p&gt; &lt;h2&gt;Next steps&lt;/h2&gt; &lt;p&gt;The Open Data Hub team is currently focused on multiple next steps or tasks:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Resolving component issues already discussed in this document, such as Pipeline and Katib.&lt;/li&gt; &lt;li&gt;Integrating Kubeflow 0.7 with Red Hat Service Mesh on OpenShift 4.2.&lt;/li&gt; &lt;li&gt;Proposing the changes discussed in this document back upstream to the Kubeflow community.&lt;/li&gt; &lt;li&gt;Working with the Kubeflow community to add official OpenShift platform documentation on the &lt;a href="https://www.kubeflow.org/docs/" target="_blank" rel="noopener noreferrer"&gt;Kubeflow website&lt;/a&gt; as a supported platform.&lt;/li&gt; &lt;li&gt;Architecting and designing a solution for tight integration between Open Data Hub and Kubeflow that includes Operator redesign.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F10%2Finstalling-kubeflow-v0-7-on-openshift-4-2%2F&amp;#38;linkname=Installing%20Kubeflow%20v0.7%20on%20OpenShift%204.2" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F10%2Finstalling-kubeflow-v0-7-on-openshift-4-2%2F&amp;#38;linkname=Installing%20Kubeflow%20v0.7%20on%20OpenShift%204.2" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F10%2Finstalling-kubeflow-v0-7-on-openshift-4-2%2F&amp;#38;linkname=Installing%20Kubeflow%20v0.7%20on%20OpenShift%204.2" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F10%2Finstalling-kubeflow-v0-7-on-openshift-4-2%2F&amp;#38;linkname=Installing%20Kubeflow%20v0.7%20on%20OpenShift%204.2" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F10%2Finstalling-kubeflow-v0-7-on-openshift-4-2%2F&amp;#38;linkname=Installing%20Kubeflow%20v0.7%20on%20OpenShift%204.2" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F10%2Finstalling-kubeflow-v0-7-on-openshift-4-2%2F&amp;#38;linkname=Installing%20Kubeflow%20v0.7%20on%20OpenShift%204.2" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F10%2Finstalling-kubeflow-v0-7-on-openshift-4-2%2F&amp;#38;linkname=Installing%20Kubeflow%20v0.7%20on%20OpenShift%204.2" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F10%2Finstalling-kubeflow-v0-7-on-openshift-4-2%2F&amp;#038;title=Installing%20Kubeflow%20v0.7%20on%20OpenShift%204.2" data-a2a-url="https://developers.redhat.com/blog/2020/02/10/installing-kubeflow-v0-7-on-openshift-4-2/" data-a2a-title="Installing Kubeflow v0.7 on OpenShift 4.2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/10/installing-kubeflow-v0-7-on-openshift-4-2/"&gt;Installing Kubeflow v0.7 on OpenShift 4.2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/KDXuwXzLVJc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;As part of the Open Data Hub project, we see potential and value in the Kubeflow project, so we dedicated our efforts to enable Kubeflow on Red Hat OpenShift. We decided to use Kubeflow 0.7 as that was the latest released version at the time this work began. The work included adding new installation scripts [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/10/installing-kubeflow-v0-7-on-openshift-4-2/"&gt;Installing Kubeflow v0.7 on OpenShift 4.2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">679917</post-id><dc:creator>Juana Nakfour</dc:creator><dc:date>2020-02-10T08:00:14Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/10/installing-kubeflow-v0-7-on-openshift-4-2/</feedburner:origLink></entry><entry><title>Integrating with SaaS Applications - Common Architectural Elements</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3okRjSKFLa0/integrating-saas-applications-common-architectural-elements.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integrating_with_saas_applications_common_architectural_elements</id><updated>2020-02-10T06:00:00Z</updated><published>2020-02-10T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-AzXG8srNP44/Xj-t6bgALLI/AAAAAAAABnw/lgKidHnFpYYF8hikQzFZIgT313nlBAgiACLcBGAsYHQ/s1600/integrate-saas-apps-ld.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="integrating with SaaS applications" border="0" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-AzXG8srNP44/Xj-t6bgALLI/AAAAAAAABnw/lgKidHnFpYYF8hikQzFZIgT313nlBAgiACLcBGAsYHQ/s320/integrate-saas-apps-ld.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 2 - Common architectural elements&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The introduction to integrating with SaaS applications laid out groundwork for a deeper exploration of it's logical diagram.&lt;br /&gt;&lt;br /&gt;In this article we continue with a look at the common architectural elements. A description is provided to guide you with aligning what we've presented here with the landscape your organization works with every day.&lt;br /&gt;&lt;br /&gt;These details should help you understand both what the elements contain and how they might align and how their functionalities are grouped.&lt;br /&gt;&lt;br /&gt;Let's look at the foundation of our integrate with SaaS applications blueprint, the logical diagram with it's architectural elements.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="https://1.bp.blogspot.com/-S1_exoN52YU/Xj-wlDqS7pI/AAAAAAAABn8/bBtjGHwZU9YiCy2D7Jc5Gglt6almVF2bACLcBGAsYHQ/s1600/exerntal-apps.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="integrating with SaaS applications" border="0" data-original-height="504" data-original-width="1050" height="95" src="https://1.bp.blogspot.com/-S1_exoN52YU/Xj-wlDqS7pI/AAAAAAAABn8/bBtjGHwZU9YiCy2D7Jc5Gglt6almVF2bACLcBGAsYHQ/s200/exerntal-apps.png" title="" width="200" /&gt;&lt;/a&gt;External applications&lt;/h3&gt;&lt;div&gt;There is one element in this category of external applications and it's meant to encompass the applications external to our systems. &lt;br /&gt;&lt;br /&gt;These can be any applications provided by the organization or third parties connecting with internal services.&lt;br /&gt;&lt;br /&gt;These are applications that can operating outside of the organization's infrastructure, or as internal employee interfaces to the organizational services. Can include IVR, text, chatbots, etc. We've seen many instances of these applications and decides to group them in one element fronting all external actions that trigger a need for integrating with SaaS applications.&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-4_VAmayVOYM/Xj-wqSdaBXI/AAAAAAAABoA/MBL5F7GHlfsZgoMtA5hrgb2ZLmYVCSTTQCLcBGAsYHQ/s1600/container-platform.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="integrating with SaaS applications" border="0" data-original-height="598" data-original-width="1600" height="119" src="https://1.bp.blogspot.com/-4_VAmayVOYM/Xj-wqSdaBXI/AAAAAAAABoA/MBL5F7GHlfsZgoMtA5hrgb2ZLmYVCSTTQCLcBGAsYHQ/s320/container-platform.png" title="" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Container platform services&lt;/h3&gt;&lt;div&gt;A group of elements are collected here in the container platform and provide essential services to external applications.&lt;br /&gt;&lt;br /&gt;Note that each element covers a microservice collection and in most cases are discussed as a group of microservices without detailing or splitting out single specific services.&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;i&gt;Frontend microservices:&lt;/i&gt; Interface of business logic, mobile clients and orchestration calls to back end components.&lt;i&gt;&amp;nbsp;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Process microservices:&lt;/i&gt; Services for orchestration using deployed process automation services.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Integration data microservices:&lt;/i&gt; Providing abstraction between front end services and internal storage.&amp;nbsp;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Integration microservices:&lt;/i&gt; Providing abstraction between front end services and external systems. &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;As these microservices would likely be specific to each organizations needs, it's helpful enough to understand their groupings without worrying about functional details.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Infrastructure services&lt;/h3&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-HZyzj_1rbIw/Xj-w1nkFC-I/AAAAAAAABoM/zP7OdnO2irMjv72sCMevzjtB3j9lIMcTwCLcBGAsYHQ/s1600/infra-services.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="integrating with SaaS applications" border="0" data-original-height="1560" data-original-width="1098" height="320" src="https://1.bp.blogspot.com/-HZyzj_1rbIw/Xj-w1nkFC-I/AAAAAAAABoM/zP7OdnO2irMjv72sCMevzjtB3j9lIMcTwCLcBGAsYHQ/s320/infra-services.png" title="" width="225" /&gt;&lt;/a&gt;These services are grouped into infrastructure as they provide core functionality that cross many system boundaries and / or are embedded with the help of code plugins.&lt;br /&gt;&lt;br /&gt;Some are physical servers or platforms that support services across the organization and others have a coordinating function.&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;i&gt;API management:&lt;/i&gt; Manage and expose APIs for microservice and application interface availability.&lt;/li&gt;&lt;li&gt;&lt;i&gt;External SaaS CRM:&lt;/i&gt; External customer resource management (CRM) system exposing an API.&lt;/li&gt;&lt;li&gt;&lt;i&gt;3rd party services platform:&lt;/i&gt; A platform hosted with services for entire organization, legacy architecture choice.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Single-sign-on (SSO) server:&lt;/i&gt; Single-Sign-On server, supporting code plugins.&lt;/li&gt;&lt;li&gt;&lt;i&gt;Storage:&lt;/i&gt; Large unstructured data or file storage local or cloud-based as needed by applications, processes or services.&lt;/li&gt;&lt;/ul&gt;As we look in to the more detailed schematic diagrams of specific use cases, not all of these infrastructure elements are apparent, but they are core to the successful integrating with SaaS applications solutions.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3&gt;&lt;/h3&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;ul style="text-align: left;"&gt;&lt;/ul&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on integrating SaaS applications portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/01/integrating-saas-applications-an-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-common-architectural-elements.html" target="_blank"&gt;Common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Example external CRM integration&lt;/li&gt;&lt;li&gt;Example 3rd-party platform integration&lt;/li&gt;&lt;li&gt;Example processes with 3rd-party platform integration&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at the generic common architecture to integrate SaaS applications. &lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=061Q1qc_YGM:q6WSD8jv_wc:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=061Q1qc_YGM:q6WSD8jv_wc:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=061Q1qc_YGM:q6WSD8jv_wc:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=061Q1qc_YGM:q6WSD8jv_wc:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=061Q1qc_YGM:q6WSD8jv_wc:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=061Q1qc_YGM:q6WSD8jv_wc:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=061Q1qc_YGM:q6WSD8jv_wc:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=061Q1qc_YGM:q6WSD8jv_wc:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=061Q1qc_YGM:q6WSD8jv_wc:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=061Q1qc_YGM:q6WSD8jv_wc:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=061Q1qc_YGM:q6WSD8jv_wc:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/061Q1qc_YGM" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3okRjSKFLa0" height="1" width="1" alt=""/&gt;</content><summary>Part 2 - Common architectural elementsThe introduction to integrating with SaaS applications laid out groundwork for a deeper exploration of it's logical diagram. In this article we continue with a look at the common architectural elements. A description is provided to guide you with aligning what we've presented here with the landscape your organization works with every day. These details should ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-02-10T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/061Q1qc_YGM/integrating-saas-applications-common-architectural-elements.html</feedburner:origLink></entry><entry><title>JBoss Editorial (February 7th): Quarkus, Camel, Keycloak and Kie</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fWzLWw6Z370/jboss-editorial-february-7th-quarkus-camel-keycloak-and-kie" /><category term="Camel" scheme="searchisko:content:tags" /><category term="camel-k" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="jgroups" scheme="searchisko:content:tags" /><category term="jwt" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="news" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><category term="weekly_update" scheme="searchisko:content:tags" /><author><name>Kevin Conner</name></author><id>searchisko:content:id:jbossorg_blog-jboss_editorial_february_7th_quarkus_camel_keycloak_and_kie</id><updated>2020-02-07T23:55:07Z</updated><published>2020-02-07T23:55:07Z</published><content type="html">&lt;!-- [DocumentBodyStart:31e0f10d-75c9-4183-983c-a0e055494868] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p style="font-family: Cabin;"&gt;Welcome to another edition of the JBoss Editorial, our regular tour through the JBoss Communities in search of news and developments from the community projects.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;h2 style="font-family: Cabin;"&gt;Quarkus Tools for Visual Studio Code&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="font-family: Cabin;"&gt;Quarkus Tools for Visual Studio Code 1.3.0 has now been released on the VS Code Marketplace, bringing with it many new features accompanying the evolution of Quarkus.&amp;#160; &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/07/introducing-10-new-features-in-quarkus-tools-for-visual-studio-code/" rel="nofollow"&gt;David provides a summary of the major improvements in this release&lt;/a&gt; as well as a &lt;a class="jive-link-external-small" href="https://youtu.be/6SZPJOaswtA" rel="nofollow"&gt;demo video&lt;/a&gt; which covers the features presented in his article.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;h2 style="font-family: Cabin;"&gt;Camel and Camel K&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="font-family: Cabin;"&gt;Claus has written an update to his first blog discussing the optimisations which they are making in the Camel 3.1 release, &lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core_30.html" rel="nofollow"&gt;providing a status update on progress as they drive towards fewer object allocations, method invocations and improved performance&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="font-family: Cabin;"&gt;Aur&amp;eacute;lien has written an article &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/01/24/apache-camel-k-development-inside-eclipse-che-iteration-1/" rel="nofollow"&gt;describing the first iteration of Apache Camel K integration within Eclipse Che 7.6.0&lt;/a&gt;.&amp;#160; The article covers how to set up the Che instance, create a new workspace and deploy a Camel K integration within the Che environment.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="font-family: Cabin;"&gt;Deploying Camel K integrations in a lightweight manner can be supported through the support of standalone Java files describing the integration, however this comes with the downside that existing IDEs will not provide complete support out of the box.&amp;#160; There are already a number of solutions to this problem albeit without any intuitive configuration.&amp;#160; &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/03/camel-k-standalone-java-file-now-with-java-language-support/" rel="nofollow"&gt;Red Hat's Tooling for Apache Camel K offers a new solution to this problem with support for the Java language now being included&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;h2 style="font-family: Cabin;"&gt;Keycloak and JWT Tokens&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="font-family: Cabin;"&gt;Muhammed has written a great article demonstrating how easy &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/01/29/api-login-and-jwt-token-generation-using-keycloak/" rel="nofollow"&gt;Keycloak can be used as to obtain JWT tokens through a login process&lt;/a&gt;.&amp;#160; Muhammed begins with Keycloak configuration for users and clients before demonstrating client side login and retrieval of the JWT token.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;h2 style="font-family: Cabin;"&gt;Decision Manager and Process Automation Manager&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="font-family: Cabin;"&gt;Eric has revamped his installer scripts to support the latest versions of &lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/01/how-to-install-red-hat-decision-manager-76-in-minutes.html" rel="nofollow"&gt;Decision Manager&lt;/a&gt; and &lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/01/how-to-install-red-hat-process-automation-manager-76-in-minutes.html" rel="nofollow"&gt;Process Automation Manager&lt;/a&gt;, setting up local environments for both environments in three easy steps; download, unzip and run the init scripts to get started!!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="font-family: Cabin;"&gt;Guilherme has also announced the &lt;a class="jive-link-external-small" href="http://blog.athico.com/2020/02/kie-decision-tooling-blog.html" rel="nofollow"&gt;KIE Decision Tooling blog for those who want to find out more about the team building web editors to support business decisions&lt;/a&gt;, their first post discussing the new code completion feature in the DMN editor.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px; font-family: Cabin;"&gt;&amp;#160;&lt;/p&gt;&lt;h2 style="font-family: Cabin;"&gt;New Releases&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;a class="jive-link-external-small" href="http://jgroups.org/" rel="nofollow"&gt;JGroups&lt;/a&gt; team announce the &lt;a class="jive-link-external-small" href="https://belaban.blogspot.com/2020/01/first-alpha-of-jgroups-50.html" rel="nofollow"&gt;first alpha release of JGroups 5.0&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;The &lt;a class="jive-link-external-small" href="https://www.keycloak.org/" rel="nofollow"&gt;Keycloak&lt;/a&gt; team announce the &lt;a class="jive-link-external-small" href="https://www.keycloak.org/2020/02/keycloak-802-released.html" rel="nofollow"&gt;release of Keycloak 8.0.2&lt;/a&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;That's all we have for this edition of the Editorial, please join us next time for another journey through the JBoss Communities in search of more exciting updates.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:31e0f10d-75c9-4183-983c-a0e055494868] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fWzLWw6Z370" height="1" width="1" alt=""/&gt;</content><summary>Welcome to another edition of the JBoss Editorial, our regular tour through the JBoss Communities in search of news and developments from the community projects.   Quarkus Tools for Visual Studio Code   Quarkus Tools for Visual Studio Code 1.3.0 has now been released on the VS Code Marketplace, bringing with it many new features accompanying the evolution of Quarkus.  David provides a summary of t...</summary><dc:creator>Kevin Conner</dc:creator><dc:date>2020-02-07T23:55:07Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2020/02/07/jboss-editorial-february-7th-quarkus-camel-keycloak-and-kie</feedburner:origLink></entry><entry><title>Introducing 10 new features in Quarkus Tools for Visual Studio Code</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2p-wroBeVWk/" /><category term="Developer Tools" /><category term="Modern App Dev" /><category term="VS Code" /><category term="Kubernetes" /><category term="openshift" /><category term="quarkus tools" /><category term="qute" /><category term="Visual Studio Code" /><author><name>David Kwon</name></author><id>https://developers.redhat.com/blog/?p=676617</id><updated>2020-02-07T08:00:07Z</updated><published>2020-02-07T08:00:07Z</published><content type="html">&lt;p&gt;Quarkus Tools for Visual Studio Code version 1.3.0 has been released on the VS Code Marketplace to start off the new year. As Quarkus continues to introduce improvements and new features like &lt;code&gt;application.yaml&lt;/code&gt; and server-side templating support, Quarkus Tools for Visual Studio Code continues to evolve to accompany these new features and improvements.&lt;/p&gt; &lt;p&gt;For a list of all changes, please refer to the &lt;a href="https://github.com/redhat-developer/vscode-quarkus/blob/master/CHANGELOG.md" target="_blank" rel="noopener noreferrer"&gt;changelog&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can also &lt;a href="https://youtu.be/6SZPJOaswtA" target="_blank" rel="noopener noreferrer"&gt;watch a demo video&lt;/a&gt; of all the features presented in this article.&lt;/p&gt; &lt;h2&gt;New features&lt;/h2&gt; &lt;p&gt;The new features added to Quarkus Tools for Visual Studio Code 1.3.0 include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A new URL CodeLens for RESTEasy JAX-RS GET methods.&lt;/li&gt; &lt;li&gt;Hover support for &lt;code&gt;@ConfigProperty&lt;/code&gt; name in Java sources.&lt;/li&gt; &lt;li&gt;MicroProfile properties support for the REST Client.&lt;/li&gt; &lt;li&gt;Kubernetes, &lt;a href="http://developers.redhat.com/openshift/" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenShift&lt;/a&gt;, Docker, and S2I property support.&lt;/li&gt; &lt;li&gt;A Quick Fix to add unknown property namespaces to ignore.&lt;/li&gt; &lt;li&gt;Go to definition support for enum values from &lt;code&gt;application.properties&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;YAML support (experimental).&lt;/li&gt; &lt;li&gt;A new extension descriptions toggle button.&lt;/li&gt; &lt;li&gt;Different ways to open a new Quarkus project.&lt;/li&gt; &lt;li&gt;Syntax highlighting for Qute languages.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;URL CodeLens for RESTEasy JAX-RS GET methods&lt;/h2&gt; &lt;p&gt;When editing a resource class while the current Quarkus application is running in development mode (&lt;code&gt;./mvnw compile quarkus:dev&lt;/code&gt; or &lt;code&gt;./gradlew quarkusDev&lt;/code&gt;), there are now CodeLenses that provide the URL for the GET endpoints. This feature takes into account the pathname and the HTTP server port in your &lt;code&gt;application.properties&lt;/code&gt; file in order to create the URL.&lt;/p&gt; &lt;p&gt;Clicking on the CodeLens URL opens this URL in your default browser, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_676737" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-676737" class="wp-image-676737" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/codelensURL-min.gif" alt="Animation showing edits, and then clicking to open the URL." width="640" height="390" /&gt;&lt;p id="caption-attachment-676737" class="wp-caption-text"&gt;Figure 1: Clicking the CodeLens URL opens it in your default browser.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once the Quarkus application stops running, the CodeLens URL will no longer appear, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_676727" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-676727" class="wp-image-676727" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/codelensURL2-min.gif" alt="Animation showing edits and then the missing CodeLens URL." width="640" height="390" /&gt;&lt;p id="caption-attachment-676727" class="wp-caption-text"&gt;Figure 2: The CodeLens URL disappears once the Quarkus application stops running.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Please keep in mind that CodeLenses in VS Code are only updated when certain events happen. If the URL CodeLens does not appear, there are two easy ways to trigger a CodeLens update: switch tabs or start typing in any file. Also, make sure that the &lt;code&gt;quarkus.tools.codeLens.urlCodeLensEnabled&lt;/code&gt; VS Code setting is set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Hover support for &lt;code&gt;@ConfigProperty&lt;/code&gt; name in Java sources&lt;/h2&gt; &lt;p&gt;Hovering over the name value in a &lt;code&gt;@ConfigProperty&lt;/code&gt; annotation now displays the hovered property&amp;#8217;s value, as shown in Figure 3. Currently, the value either comes from &lt;code&gt;application.properties&lt;/code&gt; file, or the default value field.&lt;/p&gt; &lt;div id="attachment_676767" style="width: 651px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-676767" class="wp-image-676767" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/hoverconfigproperty-min.gif" alt="Animation showing that you can hover over these name values to see the property's value." width="641" height="390" /&gt;&lt;p id="caption-attachment-676767" class="wp-caption-text"&gt;Figure 3: Hover over a &lt;code&gt;@ConfigProperty&lt;/code&gt; annotation&amp;#8217;s name value to display the hovered property&amp;#8217;s value.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;MicroProfile properties support for the REST Client&lt;/h2&gt; &lt;p&gt;There is now completion, hover, documentation, and validation for the MicroProfile properties from the REST Client. After registering a REST Client using &lt;code&gt;@RegisterRestClient&lt;/code&gt; like so:&lt;/p&gt; &lt;pre&gt;package com.mycompany.remoteServices; @RegisterRestClient public interface MyServiceClient { @GET @Path("/greet") String greet(); }&lt;/pre&gt; &lt;p&gt;Language features will become available for the related MicroProfile config properties, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_682477" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-682477" class="wp-image-682477" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/MPRest.gif" alt="Animation showing the new properties available in the extension." width="639" height="271" /&gt;&lt;p id="caption-attachment-682477" class="wp-caption-text"&gt;Figure 4: Language features for the new properties.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;More information about using the MicroProfile REST Client is available in the Quarkus guides &lt;a href="https://quarkus.io/guides/rest-client" target="_blank" rel="noopener noreferrer"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Kubernetes, Openshift, Docker, and S2I property support&lt;/h2&gt; &lt;p&gt;Likewise, there is now completion, hover, documentation, and validation for the &lt;code&gt;kubernetes.*&lt;/code&gt;, &lt;code&gt;openshift.*&lt;/code&gt;, &lt;code&gt;docker.*&lt;/code&gt;, and &lt;code&gt;s2i.*&lt;/code&gt; properties coming from the &lt;a href="https://quarkus.io/guides/kubernetes#enable-kubernetes-support" target="_blank" rel="noopener noreferrer"&gt;Kubernetes Quarkus extension&lt;/a&gt;, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_676777" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-676777" class="wp-image-676777" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/kubopedocs2i-min.gif" alt="Animation showing the new properties available in the extension." width="639" height="271" /&gt;&lt;p id="caption-attachment-676777" class="wp-caption-text"&gt;Figure 5: Languages features for the new properties.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In-depth documentation about generating Kubernetes resources and the config properties involved can be found in the Quarkus guides &lt;a href="https://quarkus.io/guides/kubernetes#configuration-options" target="_blank" rel="noopener noreferrer"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Quick Fix to add unknown property namespaces to ignore&lt;/h2&gt; &lt;p&gt;There is now a new Quick Fix that helps you exclude large groups of unknown properties from unknown property validation, as long as they share the same parent namespace. For example, if your &lt;code&gt;application.properties&lt;/code&gt; file contains four properties with an unknown property error, like so:&lt;/p&gt; &lt;pre&gt;# All four properties cause an 'Unknown property' error unknown.test1=a unknown.test2=b unknown.test3=c unknown.test4=d&lt;/pre&gt; &lt;p&gt;Ignoring all four properties from unknown property validation is easily done with the Quick Fix, which adds &lt;code&gt;unknown.*&lt;/code&gt; to the &lt;code&gt;quarkus.tools.validation.unknown.excluded&lt;/code&gt; workspace configuration array, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_676797" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-676797" class="wp-image-676797" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/codeaction.gif" alt="Animation showing how you can ignore certain properties." width="639" height="389" /&gt;&lt;p id="caption-attachment-676797" class="wp-caption-text"&gt;Figure 6: Ignoring properties from unknown property validation.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Go to definition support for enum values from &lt;code&gt;application.properties&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;Up until now, Go to definition was only supported for config property keys and not their values. This release brings the Go to definition feature for enum values, as shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_676817" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-676817" class="wp-image-676817" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/enumvalue.gif" alt="Animation showing how to use the definition features for enum values." width="639" height="462" /&gt;&lt;p id="caption-attachment-676817" class="wp-caption-text"&gt;Figure 7: Using the Go to definition feature with enum values.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;YAML support (experimental)&lt;/h2&gt; &lt;p&gt;The release of &lt;a href="https://quarkus.io/blog/quarkus-1-1-0-final-released/" target="_blank" rel="noopener noreferrer"&gt;Quarkus 1.1.0.Final&lt;/a&gt;, brought &lt;a href="https://quarkus.io/guides/config#yaml" target="_blank" rel="noopener noreferrer"&gt;YAML configuration support&lt;/a&gt;, meaning that you can now configure your Quarkus application with either an &lt;code&gt;application.yaml&lt;/code&gt; file or an &lt;code&gt;application.properties&lt;/code&gt; file (but try to stick with one or the other).&lt;/p&gt; &lt;p&gt;As a result, there is now completion support for &lt;code&gt;application.yaml&lt;/code&gt; files, as shown in Figure 8. Similar to &lt;code&gt;application.properties&lt;/code&gt;, the completion options in &lt;code&gt;application.yaml&lt;/code&gt; file will be in sync with the Quarkus extensions that are available to the current project at the time (in &lt;code&gt;pom.xml&lt;/code&gt; or &lt;code&gt;build.gradle&lt;/code&gt;), therefore giving you only the relevant completion options.&lt;/p&gt; &lt;p&gt;This feature depends on the &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml" target="_blank" rel="noopener noreferrer"&gt;YAML Language Support by Red Hat&lt;/a&gt; extension. If it is not currently installed, a new prompt will propose to install it.&lt;/p&gt; &lt;div id="attachment_682807" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-682807" class="wp-image-682807 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/yamlcompletion_gif.gif" alt="Animation showing the completion support in use." width="640" height="313" /&gt;&lt;p id="caption-attachment-682807" class="wp-caption-text"&gt;Figure 8: New completion support for the &lt;code&gt;application.yaml&lt;/code&gt; file.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Language feature support for &lt;code&gt;application.yaml&lt;/code&gt; files is in its experimental stages. Compared to &lt;code&gt;application.properties&lt;/code&gt; support, there are missing features:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Go to definition support.&lt;/li&gt; &lt;li&gt;Code action support.&lt;/li&gt; &lt;li&gt;Automatic completion for default values.&lt;/li&gt; &lt;li&gt;Limited config property and value validation support.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;A new extension descriptions toggle button&lt;/h2&gt; &lt;p&gt;As the number of Quarkus extensions continues to rise, the new extension descriptions in the extension selection prompt help you recognize and discover new extensions, as shown in Figure 9. The extension selection prompt appears when selecting Quarkus extensions from the &lt;strong&gt;Quarkus: Generate a Quarkus project&lt;/strong&gt; and &lt;strong&gt;Quarkus: Add extensions to current project&lt;/strong&gt; wizards.&lt;/p&gt; &lt;div id="attachment_676867" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-676867" class="wp-image-676867 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/extensions_before_after_text-1024x316.png" alt="Animation showing extension discovery before and after this release." width="640" height="198" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/extensions_before_after_text-1024x316.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/extensions_before_after_text-300x93.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/extensions_before_after_text-768x237.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/extensions_before_after_text.png 1114w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-676867" class="wp-caption-text"&gt;Figure 9: Discover new extensions with the new descriptions.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;There is also a new button on the top right of the selection box that toggles whether or not the extension descriptions should appear, as shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_682487" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-682487" class="wp-image-682487 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/toggle_gif.gif" alt="Animation showing how to use the toggle for extension descriptions." width="640" height="307" /&gt;&lt;p id="caption-attachment-682487" class="wp-caption-text"&gt;Figure 10: Toggle whether or not extension descriptions should appear.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Different ways to open a new Quarkus project&lt;/h2&gt; &lt;p&gt;After creating a new project with the &lt;strong&gt;Quarkus: Generate a Quarkus project&lt;/strong&gt; wizard, there is now a new prompt that asks how the new project should be opened. The following &lt;em&gt;before&lt;/em&gt; and &lt;em&gt;after&lt;/em&gt; diagrams describe the changes:&lt;/p&gt; &lt;div id="attachment_682437" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-682437" class="wp-image-682437" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/gen_before_updated.png" alt="'Before' diagram." width="639" height="388" /&gt;&lt;p id="caption-attachment-682437" class="wp-caption-text"&gt;Figure 11: &lt;em&gt;(Before)&lt;/em&gt; Scenarios and options provided when generating a new Quarkus project.&lt;/p&gt;&lt;/div&gt; &lt;div id="attachment_682417" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-682417" class="wp-image-682417" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/gen_after_updated.png" alt="'After' diagram." width="639" height="388" /&gt;&lt;p id="caption-attachment-682417" class="wp-caption-text"&gt;Figure 12: &lt;em&gt;(After)&lt;/em&gt; Scenarios and options provided when generating a new Quarkus project.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;To help visualize one of the possible scenarios, Figure 13 shows the options presented when generating a project while a workspace is open.&lt;/p&gt; &lt;div id="attachment_676907" style="width: 649px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-676907" class="wp-image-676907" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/newproject.gif" alt="Animation of the new options provided when generating a project." width="639" height="388" /&gt;&lt;p id="caption-attachment-676907" class="wp-caption-text"&gt;Figure 13: Creating a new project with the &lt;strong&gt;Quarkus: Generate a Quarkus project&lt;/strong&gt; wizard.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Syntax highlighting for Qute languages&lt;/h2&gt; &lt;p&gt;&lt;a href="https://quarkus.io/guides/qute-reference" target="_blank" rel="noopener noreferrer"&gt;Qute&lt;/a&gt; is a new server-side templating engine created with Quarkus in mind. This release brings new Qute language modes in VS Code: Qute HTML, Qute JSON, Qute YAML, and Qute Text. These new language modes are automatically applied to your current file if your file’s extension is &lt;code&gt;.qute.html&lt;/code&gt;, &lt;code&gt;.qute.json&lt;/code&gt;, &lt;code&gt;.qute.yaml&lt;/code&gt;, or &lt;code&gt;.qute.txt&lt;/code&gt; respectively.&lt;/p&gt; &lt;p&gt;Thanks to the new language modes, Qute-specific syntax highlighting and commenting are now provided, as shown in Figure 14.&lt;/p&gt; &lt;div id="attachment_682497" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-682497" class="wp-image-682497 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/qute_gif.gif" alt="Animation showing Qute-specific syntax highlighting and commenting." width="640" height="331" /&gt;&lt;p id="caption-attachment-682497" class="wp-caption-text"&gt;Figure 14: Qute-specific syntax highlighting and commenting.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;For more information about the Qute templating engine, please refer to the &lt;a href="https://quarkus.io/guides/qute" target="_blank" rel="noopener noreferrer"&gt;Quarkus templating engine guide&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Moving forward&lt;/h2&gt; &lt;p&gt;This wraps up the new major features in this release. If you have any suggestions or feedback, please feel free to &lt;a href="https://github.com/redhat-developer/vscode-quarkus/issues/new" target="_blank" rel="noopener noreferrer"&gt;open a GitHub issue&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For future releases, alongside general enhancements, we aim to bring more robust language feature support for &lt;code&gt;application.yaml&lt;/code&gt; and Qute languages. Stay tuned for the next release!&lt;/p&gt; &lt;h2&gt;Links&lt;/h2&gt; &lt;p&gt;Here are the important links:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-quarkus" target="_blank" rel="noopener noreferrer"&gt;VS Code Marketplace&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/redhat-developer/vscode-quarkus" target="_blank" rel="noopener noreferrer"&gt;GitHub repository&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/redhat-developer/vscode-quarkus/issues/new" target="_blank" rel="noopener noreferrer"&gt;Open a GitHub issue&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/redhat-developer/vscode-quarkus/blob/master/CHANGELOG.md" target="_blank" rel="noopener noreferrer"&gt;Changelog&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/11/21/new-features-in-quarkus-tools-for-visual-studio-code-1-2-0/"&gt;Version 1.2.0 release article&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/09/23/how-the-new-quarkus-extension-for-visual-studio-code-improves-the-development-experience/"&gt;Version 1.0.0 release article&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F07%2Fintroducing-10-new-features-in-quarkus-tools-for-visual-studio-code%2F&amp;#38;linkname=Introducing%2010%20new%20features%20in%20Quarkus%20Tools%20for%20Visual%20Studio%20Code" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F07%2Fintroducing-10-new-features-in-quarkus-tools-for-visual-studio-code%2F&amp;#38;linkname=Introducing%2010%20new%20features%20in%20Quarkus%20Tools%20for%20Visual%20Studio%20Code" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F07%2Fintroducing-10-new-features-in-quarkus-tools-for-visual-studio-code%2F&amp;#38;linkname=Introducing%2010%20new%20features%20in%20Quarkus%20Tools%20for%20Visual%20Studio%20Code" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F07%2Fintroducing-10-new-features-in-quarkus-tools-for-visual-studio-code%2F&amp;#38;linkname=Introducing%2010%20new%20features%20in%20Quarkus%20Tools%20for%20Visual%20Studio%20Code" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F07%2Fintroducing-10-new-features-in-quarkus-tools-for-visual-studio-code%2F&amp;#38;linkname=Introducing%2010%20new%20features%20in%20Quarkus%20Tools%20for%20Visual%20Studio%20Code" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F07%2Fintroducing-10-new-features-in-quarkus-tools-for-visual-studio-code%2F&amp;#38;linkname=Introducing%2010%20new%20features%20in%20Quarkus%20Tools%20for%20Visual%20Studio%20Code" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F07%2Fintroducing-10-new-features-in-quarkus-tools-for-visual-studio-code%2F&amp;#38;linkname=Introducing%2010%20new%20features%20in%20Quarkus%20Tools%20for%20Visual%20Studio%20Code" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F07%2Fintroducing-10-new-features-in-quarkus-tools-for-visual-studio-code%2F&amp;#038;title=Introducing%2010%20new%20features%20in%20Quarkus%20Tools%20for%20Visual%20Studio%20Code" data-a2a-url="https://developers.redhat.com/blog/2020/02/07/introducing-10-new-features-in-quarkus-tools-for-visual-studio-code/" data-a2a-title="Introducing 10 new features in Quarkus Tools for Visual Studio Code"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/07/introducing-10-new-features-in-quarkus-tools-for-visual-studio-code/"&gt;Introducing 10 new features in Quarkus Tools for Visual Studio Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2p-wroBeVWk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Quarkus Tools for Visual Studio Code version 1.3.0 has been released on the VS Code Marketplace to start off the new year. As Quarkus continues to introduce improvements and new features like application.yaml and server-side templating support, Quarkus Tools for Visual Studio Code continues to evolve to accompany these new features and improvements. For a [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/07/introducing-10-new-features-in-quarkus-tools-for-visual-studio-code/"&gt;Introducing 10 new features in Quarkus Tools for Visual Studio Code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">676617</post-id><dc:creator>David Kwon</dc:creator><dc:date>2020-02-07T08:00:07Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/07/introducing-10-new-features-in-quarkus-tools-for-visual-studio-code/</feedburner:origLink></entry><entry><title>Red Hat OpenShift 4.2 IPI on OpenStack 13: All-in-one setup</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/yPfQWPtfzAk/" /><category term="Containers" /><category term="DevOps" /><category term="Performance" /><category term="bare metal" /><category term="openshift" /><category term="OpenStack" /><category term="provisioning" /><category term="RHEL" /><author><name>Michele Naldini</name></author><id>https://developers.redhat.com/blog/?p=656047</id><updated>2020-02-06T08:00:29Z</updated><published>2020-02-06T08:00:29Z</published><content type="html">&lt;p&gt;Months ago, a customer asked me about &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; on OpenStack, especially regarding the network configuration options available in OpenShift at the node level. In order to give them an answer and increase my confidence on $topic, I&amp;#8217;ve considered how to test this scenario.&lt;/p&gt; &lt;p&gt;At the same time, the Italian solution architect &amp;#8220;Top Gun Team&amp;#8221; was in charge of preparing speeches and demos for the Italian Red Hat Forum (also known as Open Source Day) for the Rome and Milan dates. Brainstorming led me to start my journey toward testing OpenShift 4.2 setup on OpenStack 13 in order to reply to the customer and leverage this effort to build a demo video for Red Hat Forum.&lt;/p&gt; &lt;p&gt;&lt;span id="more-656047"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to skip the bits and bytes, skip ahead to the &amp;#8220;Demo&amp;#8221; section.&lt;/p&gt; &lt;h2&gt;OpenShift 4.2 on OpenStack 13: Background&lt;/h2&gt; &lt;p&gt;Why OpenShift on OpenStack? There are a number of advantages to combining these two solutions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;OpenStack provides OpenShift with a top-class private cloud architecture&lt;/strong&gt; to host OpenShift nodes, granting multi-tenancy, an as-a-service approach, and modularity at the Infrastructure-as-a-Service (IaaS) level.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;This combination provides a three-layer scaling architecture&lt;/strong&gt; because OpenStack nodes, OpenShift nodes, and OpenShift pods can be scaled horizontally. This combination means that you can follow your business needs without constraints.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;OpenStack provides a programmatic API-driven approach&lt;/strong&gt; for OpenShift. For instance, you can scale your OpenShift worker nodes via MachineSet by calling the OpenStack API with a single click.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;OpenShift on OpenStack is integrated&lt;/strong&gt; with Nova, Cinder, Swift, Octavia, Kuryr, etc. For instance, with Kuryr you can avoid double encapsulation—i.e., OpenShift software-defined networking (SDN) on OpenStack SDN—by using Neutron networks at the pod level.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;OpenShift on OpenStack is co-engineered by Red Hat&lt;/strong&gt;, which means having aligned product roadmaps and integration tests created by the Red Hat engineers working on these projects every single day.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;OpenShift Installer Provisioned Infrastructure (IPI) was released with OpenShift 4.2. The objectives for the new installer are to provision and configure OpenShift 4.2 in a fully automated and opinionated way, making it easy to get started on day one and granting you more time to focus on your team on day two.&lt;/p&gt; &lt;p&gt;As you may know, IPI on OpenShift 4.2 also supports &lt;a href="https://www.redhat.com/en/technologies/linux-platforms/openstack-platform" target="_blank" rel="noopener noreferrer"&gt;Red Hat OpenStack Platform&lt;/a&gt; 13 as a provider, leveraging OpenStack&amp;#8217;s virtualization capabilities to host OpenShift nodes. The main concern to me was that I didn&amp;#8217;t have enough bare-metal nodes to build my environment. A standard high-availability (HA) OpenStack environment is composed of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;One director node&lt;/li&gt; &lt;li&gt;Three controllers&lt;/li&gt; &lt;li&gt;Three Ceph nodes&lt;/li&gt; &lt;li&gt;At least two compute nodes&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;My goal was to build the following to host OpenShift 4.2 and simulate an HA environment at the control plane and storage level:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;One director node (undercloud)&lt;/li&gt; &lt;li&gt;Three controllers&lt;/li&gt; &lt;li&gt;Three Ceph nodes&lt;/li&gt; &lt;li&gt;One compute node (overcloud)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;em&gt;Why?&lt;/em&gt; To simulate the existing customer environment.&lt;/p&gt; &lt;p&gt;&lt;em&gt;How?&lt;/em&gt; Using VMs as OpenStack nodes.&lt;/p&gt; &lt;p&gt;I had an idea: To see if I can set up everything with just a single bare metal server. That effort pushed me to publish this article so I can share and explain how I tested an OpenShift 4.2 IPI setup on OpenStack 13 with a single Red Hat Enterprise Linux (RHEL) server. Doing this was possible because RHEL is properly tuned to use nested virtualization with KVM.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This article was written to help customers, partners, and community members test OpenShift 4.2 on OpenStack 13 only for demo/test purposes. This procedure and the resulting architecture &lt;em&gt;are not supported&lt;/em&gt; (and not even suggested) by Red Hat.&lt;/p&gt; &lt;p&gt;I&amp;#8217;d like to thank Daniel Bellantuono for sharing helpful tips about OpenStack&amp;#8217;s architecture.&lt;/p&gt; &lt;h2&gt;Scenario&lt;/h2&gt; &lt;p&gt;I used just a single bare-metal node (L0) and then, using KVM&amp;#8217;s nested virtualization features, created a deployment of OpenStack nodes (L1) with virtualized OpenShift nodes (L2) on top. Figure one shows a schema summarizing the whole setup.&lt;/p&gt; &lt;div id="attachment_676897" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e2729a74a7f0.png"&gt;&lt;img aria-describedby="caption-attachment-676897" class="wp-image-676897" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e2729a74a7f0.png" alt="The full OpenShift 4.2 on OpenStack 13 all-in-one schema." width="640" height="519" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e2729a74a7f0.png 813w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e2729a74a7f0-300x243.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e2729a74a7f0-768x623.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-676897" class="wp-caption-text"&gt;Figure 1: The resulting schema.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now, let&amp;#8217;s dig into the different layers.&lt;/p&gt; &lt;h2&gt;L0 bare metal&lt;/h2&gt; &lt;p&gt;The L0 bare metal node was configured with Red Hat Enterprise Linux and KVM to act as a hypervisor. Its server requirements are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;At least 32 cores&lt;/li&gt; &lt;li&gt;160 GB RAM&lt;/li&gt; &lt;li&gt;500 GB SSD disk (to host high-performance VM disks, namely the Ceph OSD disks, and the Nova compute disk)&lt;/li&gt; &lt;li&gt;200 GB SAS disk (to host medium-performance VM disks, namely the undercloud disk and the controller disks).&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You could use SSDs for every VM, but I had to balance my needs with hardware availability.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;virsh&lt;/code&gt; command shows the rest of the bare metal node&amp;#8217;s specs:&lt;/p&gt; &lt;pre&gt;[root@newkvm ~]# virsh nodeinfo CPU model: x86_64 CPU(s): 32 CPU frequency: 2099 MHz CPU socket(s): 1 Core(s) per socket: 8 Thread(s) per core: 2 NUMA cell(s): 2 Memory size: 167676348 KiB&lt;/pre&gt; &lt;p&gt;Next, I used the &lt;code&gt;tuned&lt;/code&gt; command to perform network latency workload tuning at the L0 level:&lt;/p&gt; &lt;pre&gt;[root@newkvm ~]# tuned-adm profile network-latency&lt;/pre&gt; &lt;p&gt;In order to successfully configure and deploy your overcloud nodes, you need to do two things. First, you need to define a provisioning network on libvirt for the undercloud to use when installing our overcloud nodes via PXE. Second, you have to define your virtual machines.&lt;/p&gt; &lt;p&gt;Here is a snippet of network config at the L0 level:&lt;/p&gt; &lt;pre&gt;[root@newkvm ~]# cat &amp;#62; /tmp/provisioning.xml &amp;#60;&amp;#60;EOF &amp;#60;network&amp;#62; &amp;#60;name&amp;#62;provisioning&amp;#60;/name&amp;#62; &amp;#60;ip address="172.16.0.254" netmask="255.255.255.0"/&amp;#62; &amp;#60;/network&amp;#62; EOF [root@newkvm ~]# echo "Defining provisioning network..." [root@newkvm ~]# virsh net-define /tmp/provisioning.xml [root@newkvm ~]# echo "Setting net-autostart to provisioning network..." [root@newkvm ~]# virsh net-autostart provisioning [root@newkvm ~]# echo "Starting provisioning network..." [root@newkvm ~]# virsh net-start provisioning [root@newkvm ~]# echo "Disabling DHCP on default network..." [root@newkvm ~]# if(virsh net-dumpxml default | grep dhcp &amp;#38;&amp;#62;/dev/null); then virsh net-update default delete ip-dhcp-range "&amp;#60;range start='192.168.122.2' end='192.168.122.254'/&amp;#62;" --live --config echoinfo "DHCP already disabled, skipping"&lt;/pre&gt; &lt;p&gt;The provisioning network is usually a pre-existing datacenter network in a native VLAN configuration. This configuration is used by the undercloud to perform node introspection and setup via PXE and TFTP. For this reason, I created a dedicated network called &amp;#8220;provisioning&amp;#8221; (Figure 1&amp;#8217;s blue section) to attach to all of my VMs.&lt;/p&gt; &lt;p&gt;As you may already know, the entire OS setup and configuration for OpenStack nodes (VMs in our case) is managed by the Red Hat OpenStack Platform director. In addition, DHCP was disabled on the default (pre-existing) libvirt network because the director assigns IPs during OpenStack setup. Last, but not least, we need to configure our hypervisor to use an Ironic project driver. My choice was to use VirtualBMC to simulate Intelligent Platform Management Interfaces (IPMIs) that are not available in a virtual machine environment.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href="https://access.redhat.com/solutions/3057171" target="_blank" rel="noopener noreferrer"&gt;Read this Red Hat Knowledge Base&lt;/a&gt; article to learn more about how to configure VBMC and use it to import and introspect bare metal nodes.&lt;/p&gt; &lt;p&gt;I don&amp;#8217;t want to go deeper into the details of OpenStack setup because the process is long and difficult to summarize. This article assumes that you have a basic knowledge and understanding of OpenStack architecture. That being said, some basic steps are provided.&lt;/p&gt; &lt;h2&gt;L1 virtual machines (OpenStack nodes)&lt;/h2&gt; &lt;p&gt;VMs were defined using &lt;code&gt;qemu-img&lt;/code&gt;, &lt;code&gt;virt-customize&lt;/code&gt;, and &lt;code&gt;virt-install&lt;/code&gt; starting from the Red Hat Enterprise Linux 7 KVM guest image downloadable from the Red Hat Customer Portal:&lt;/p&gt; &lt;pre&gt;[root@newkvm ~]# echo "Downloading basic RHEL image" [root@newkvm ~]# curl -o rhel7-guest-official.qcow2 $RHEL_IMAGE_U [root@newkvm ~]# echo "Cloning RHEL image to a 100G sparse image..." [root@newkvm ~]# qemu-img create -f qcow2 rhel7-guest.qcow2 100G [root@newkvm ~]# echo "Extending file system..." [root@newkvm ~]# virt-resize --expand /dev/sda1 rhel7-guest-official.qcow2 rhel7-guest.qcow2 [root@newkvm ~]# echo "Checking image filesystem size..." [root@newkvm ~]# virt-filesystems --long -h -a rhel7-guest.qcow2 | grep 100G &amp;#38;&amp;#62; /dev/null [root@newkvm ~]# echo "Deleting old image..." [root@newkvm ~]# rm -f rhel7-guest-official.qcow2 [root@newkvm ~]# echo "Create undercloud qcow2 disk..." [root@newkvm ~]# qemu-img create -f qcow2 -b rhel7-guest.qcow2 undercloud.qcow2&lt;/pre&gt; &lt;p&gt;Director needs to have two NICs. The first one (eth0) is attached to the &lt;em&gt;provisioning network&lt;/em&gt; in order to successfully deploy overcloud nodes, and the second (eth1) is attached to the &lt;em&gt;default network&lt;/em&gt; in order to reach (via the NAT made by the L0 hypervisor) the internet to download the RPM packages needed for the setup:&lt;/p&gt; &lt;pre&gt;[root@newkvm ~]# echo "Customizing VM..." [root@newkvm ~]# virt-customize -a undercloud.qcow2 --root-password password:mypassword --ssh-inject "root:file:/root/.ssh/id_rsa.pub" --selinux-relabel --run-command 'yum remove cloud-init* -y &amp;#38;&amp;#38; cp /etc/sysconfig/network-scripts/ifcfg-eth{0,1} &amp;#38;&amp;#38; sed -i s/ONBOOT=.*/ONBOOT=no/g /etc/sysconfig/network-scripts/ifcfg-eth0 &amp;#38;&amp;#38; cat &amp;#60;&amp;#60; EOF &amp;#62; /etc/sysconfig/network-scripts/ifcfg-eth1 DEVICE=eth1 ONBOOT=yes IPADDR=192.168.122.253 NETMASK=255.255.255.0 GATEWAY=192.168.122.1 NM_CONTROLLED=no DNS1=192.168.122.1 EOF' [root@newkvm ~]# echo "Creating undercloud VM" [root@newkvm ~]# virt-install --ram 12288 --vcpus 8  --os-variant rhel7 \ --disk path=/var/lib/libvirt/images/undercloud.qcow2,device=disk,bus=virtio,format=qcow2 \ --import --noautoconsole --vnc &lt;strong&gt;--network network:provisioning&lt;/strong&gt; \ &lt;strong&gt;--network network:default&lt;/strong&gt; --name undercloud  [root@newkvm ~]# echo "Start undercloud VM now and on-boot" [root@newkvm ~]# virsh start undercloud [root@newkvm ~]# virsh autostart undercloud&lt;/pre&gt; &lt;p&gt;The setup for other VMs is similar, with the only difference being the amount of resources involved (such as RAM and CPU) and the NIC configuration. For the overcloud nodes, I added two additional NICs (Figure 1&amp;#8217;s orange section) because I wanted a bond inside Open vSwitch. Within this bond, I configured the OpenStack networks (namely InternalApi, Tenant Network, Storage, and Storage Management) with the tag &lt;code&gt;vlan&lt;/code&gt; and left the external network untagged. As a result, our external network on the OpenStack side will use the default network on the L0 hypervisor.&lt;/p&gt; &lt;p&gt;After this basic setup, I installed the undercloud, imported and introspected the OpenStack nodes, and then built my OSP templates to successfully deploy my overcloud:&lt;/p&gt; &lt;div id="attachment_677577" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e28195f7c158.png"&gt;&lt;img aria-describedby="caption-attachment-677577" class="wp-image-677577 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e28195f7c158-1024x342.png" alt="The output from building the OSP templates" width="640" height="214" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e28195f7c158-1024x342.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e28195f7c158-300x100.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e28195f7c158-768x257.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-677577" class="wp-caption-text"&gt;Figure 2: Building the OSP templates.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;I skipped the overcloud endpoint TLS configuration because, at the time of this writing, Red Hat OpenShift Container Platform 4.2 cannot be installed via Installer Provisioned Installation (IPI) on Red Hat OpenStack Platform when the endpoints are encrypted with self-signed certificates (as highlighted in &lt;a href="https://access.redhat.com/solutions/4735631" target="_blank" rel="noopener noreferrer"&gt;this knowledge base&lt;/a&gt; entry). Therefore, the results are this:&lt;/p&gt; &lt;pre&gt;[root@newkvm ~]# virsh list --all Id Name State ---------------------------------------------------- 17 undercloud running 18 overcloud-ceph01 running 19 overcloud-ceph02 running 20 overcloud-ceph03 running 21 overcloud-compute01 running 22 overcloud-ctrl01 running 23 overcloud-ctrl02 running 24 overcloud-ctrl03 running&lt;/pre&gt; &lt;p&gt;Here is the resulting overcloud server list:&lt;/p&gt; &lt;pre&gt;(undercloud) [stack@undercloud ~]$ openstack server list +--------------------------------------+------------------+--------+----------------------+----------------+--------------+ | ID | Name | Status | Networks | Image | Flavor | +--------------------------------------+------------------+--------+----------------------+----------------+--------------+ | 9c4d82fd-c37e-4341-9a24-ea6416751aa3 | lab-controller01 | ACTIVE | ctlplane=172.16.0.40 | overcloud-full | control | | ae2431d5-ff70-4fd3-83e3-48c72fca626e | lab-controller03 | ACTIVE | ctlplane=172.16.0.21 | overcloud-full | control | | 4176914d-23ef-4e5f-83cd-86a53d320fc4 | lab-controller02 | ACTIVE | ctlplane=172.16.0.29 | overcloud-full | control | | 78e6d4b0-c3de-431d-b144-6aa19664818d | lab-ceph01 | ACTIVE | ctlplane=172.16.0.46 | overcloud-full | ceph-storage | | b7bb7596-4bf7-45f7-bd3b-c6bb79304531 | lab-ceph02 | ACTIVE | ctlplane=172.16.0.22 | overcloud-full | ceph-storage | | 35258a3a-ff8b-44d0-b68b-a55039c4451d | lab-compute01 | ACTIVE | ctlplane=172.16.0.26 | overcloud-full | compute | | 93d7ff6c-4713-431e-9461-0303126eb7ad | lab-ceph03 | ACTIVE | ctlplane=172.16.0.37 | overcloud-full | ceph-storage | +--------------------------------------+------------------+--------+----------------------+----------------+--------------+&lt;/pre&gt; &lt;p&gt;Because of the limited hardware capabilities (and over-committing, too, given that we are talking about one single bare-metal server), I executed many tests in order to successfully deploy OpenShift on OpenStack. I ran into many timeout issues but finally, I found the right tuning to apply. What follows are a couple of tips and tricks regarding OpenStack compute node timeout tuning.&lt;/p&gt; &lt;p&gt;You probably had to make two edits in the &lt;code&gt;nova_libvirt&lt;/code&gt; container configuration file &lt;code&gt;(/var/lib/config-data/puppet-generated/nova_libvirt/etc/nova/nova.conf)&lt;/code&gt;. The first is in the &lt;code&gt;[neutron]&lt;/code&gt; section, setting a timeout value (in my case 300 seconds) big enough to avoid timeouts on the Neutron side when nova spawns a new instance:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;[neutron] url=http://172.17.1.150:9696 ovs_bridge=br-int default_floating_pool=nova extension_sync_interval=600 &lt;strong&gt;timeout=300&lt;/strong&gt;&lt;/pre&gt; &lt;p&gt;The second is in the  &lt;code&gt;[default]&lt;/code&gt; section, setting a timeout value (in my case 300 seconds) big enough to avoid timeouts on the Neutron side when nova tries to attach a Virtual Interface (VIF) to a new instance:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;[default] instance_usage_audit_period=hour rootwrap_config=/etc/nova/rootwrap.conf compute_driver=libvirt.LibvirtDriver allow_resize_to_same_host=False vif_plugging_is_fatal=True &lt;strong&gt;vif_plugging_timeout=300&lt;/strong&gt;&lt;/pre&gt; &lt;p&gt;After these edits, you would restart the &lt;code&gt;nova_libvirt&lt;/code&gt; container on the compute node.&lt;/p&gt; &lt;p&gt;Be aware that these changes are applied to the OpenStack Nova container after a container restart. If you want to redeploy your overcloud later, you&amp;#8217;ll have to customize &lt;code&gt;nova.conf&lt;/code&gt; via a &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/13/html/advanced_overcloud_customization/chap-configuration_hooks#sect-Customizing_Overcloud_PreConfiguration" target="_blank" rel="noopener noreferrer"&gt;custom puppet configuration&lt;/a&gt; executed by OpenStack director.&lt;/p&gt; &lt;h2&gt;L2 nested virtual machines (OpenShift nodes)&lt;/h2&gt; &lt;p&gt;In addition to those nodes (VMs in my case), I of course had to consider the list of requirements needed by IPI in terms of vCPU, RAM, floating IPs, and the security groups to be available at the tenant level. The full prerequisites for OpenShift 4.2 IPI on OpenStack are available &lt;a href="https://docs.openshift.com/container-platform/4.2/installing/installing_openstack/installing-openstack-installer-custom.html#installation-osp-default-deployment_installing-openstack-installer-custom" target="_blank" rel="noopener noreferrer"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Because I&amp;#8217;ve tested the setup many times and I didn&amp;#8217;t want to worry about prerequisites every time I executed a setup, I made a simple bash script to prepare my tenant on OpenStack:&lt;/p&gt; &lt;pre&gt;[stack@undercloud osd-ocp-demo]$ cat create_ocp_tenant.sh #!/bin/bash source ../overcloudrc openstack project create ocp-tenant openstack user create ocp-user --password mypassword user=$(openstack user show ocp-user -f value -c id) admin=$(openstack user show admin -f value -c id) project=$(openstack project show ocp-tenant -f value -c id) openstack role add --user $user --project $project _member_ openstack role add --user $user --project $project admin openstack role add --user $admin --project $project admin openstack role add --user $user --project $project swiftoperator # show default quota and set new limits on project ocp-tenant echo "compute quota" openstack quota list --compute --project ocp-tenant -f yaml openstack quota set --cores 40 --ram 102400 $project echo "network quota" openstack quota list --network --project ocp-tenant -f yaml openstack quota set --secgroups 40 --secgroup-rules 500 $project # create needed flavors openstack flavor create --ram 16384 --vcpu 4 --disk 25 master echo -e "working on $project" source ocp-tenant-openrc openstack object store account set --property Temp-URL-Key=superkey # create rhcos image curl --compressed -J -L -o rhcos-openstack.qcow2 https://mirror.openshift.com/pub/openshift-v4/dependencies/rhcos/pre-release/latest/rhcos-42.80.20191002.0-openstack.qcow2 openstack image create --container-format=bare --disk-format=qcow2 --file rhcos-openstack.qcow2 rhcos mkdir -p /home/stack/osd-ocp-demo cd /home/stack/osd-ocp-demo cat &amp;#60;&amp;#60;EOF &amp;#62; clouds.yaml clouds: openstack: auth: auth_url: http://192.168.122.150:5000/v3 username: "ocp-user" password: "mypassword" project_id: $project project_name: "ocp-tenant" user_domain_name: "Default" region_name: "regionOne" interface: "public" identity_api_version: 3 EOF wget -r --no-parent -A 'openshift-install-linux*.tar.gz' https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/ wget -r --no-parent -A 'openshift-client-linux*.tar.gz' https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/ tar -xvzf mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-install-linux-4.2.4.tar.gz -C . tar -xvzf mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux-4.2.0.tar.gz -C . # openstack FIP for API lb openstack floating ip create --floating-ip-address 192.168.122.164 --project ocp-tenant external # openstack FIP for APPS lb openstack floating ip create --floating-ip-address 192.168.122.180 --project ocp-tenant external # add ssh key to ssh agent eval "$(ssh-agent -s)" ssh-add /home/stack/.ssh/id_rsa # configure KUBECONFIG path export KUBECONFIG='/home/stack/osd-ocp-demo/auth/kubeconfig'&lt;/pre&gt; &lt;p&gt;Now that the prerequisites are here, let us look at our &lt;code&gt;install-config.yam&lt;/code&gt; file, which will instruct the IPI installer about OpenShift configuration in terms of the number of nodes, flavor to be used, network CIDR, etc.&lt;/p&gt; &lt;p&gt;As you can see, I specified fields to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Build two worker nodes.&lt;/li&gt; &lt;li&gt;Build three master nodes.&lt;/li&gt; &lt;li&gt;Use OpenStack as the provider with the flavor &amp;#8220;master&amp;#8221; (created by the script &lt;code&gt;create_ocp_tenant.sh)&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In addition, I included a floating IP (FIP) for the internal API load balancer (&lt;code&gt;lbFloatingIP&lt;/code&gt;)—this FIP grants access to the internal LB (API load balancer):&lt;/p&gt; &lt;pre&gt;(undercloud) [stack@undercloud osd-ocp-demo-static-nic]$ cat template/install-config.yaml apiVersion: v1 clusterID: ocp4 baseDomain: osd2019.local compute: - hyperthreading: Enabled &lt;strong&gt;name: worker&lt;/strong&gt; platform: {} &lt;strong&gt;replicas: 2&lt;/strong&gt; type: worker controlPlane: hyperthreading: Enabled &lt;strong&gt;name: master&lt;/strong&gt; platform: {} &lt;strong&gt;replicas: 3&lt;/strong&gt; type: master metadata: name: ocp4 networking: clusterNetwork: - cidr: 10.128.0.0/14 hostPrefix: 23 machineCIDR: 10.0.0.0/16 networkType: OpenShiftSDN serviceNetwork: - 172.60.0.0/16 platform: openstack: &lt;strong&gt;cloud: openstack&lt;/strong&gt; computeFlavor: master externalNetwork: external &lt;strong&gt;lbFloatingIP: 192.168.122.164&lt;/strong&gt; &lt;strong&gt;octaviaSupport: false&lt;/strong&gt; region: regionOne trunkSupport: false pullSecret: 'mypull secret' sshKey: ssh-rsa blablabla stack@undercloud.redhat.local&lt;/pre&gt; &lt;p&gt;You may also notice that I didn&amp;#8217;t use Octavia (an OpenStack load balancer-as-a-service) because, in my own test, I specifically want to simulate a customer environment where Octavia is not used. Octavia is &lt;em&gt;not&lt;/em&gt; a strict requirement unless you are using Kuryr.&lt;/p&gt; &lt;p&gt;We can now execute the installation with a simple command (if you want, you can specify the debug log level in order to have a better understanding of the installation process):&lt;/p&gt; &lt;pre&gt;(overcloud) [stack@undercloud osd-ocp-demo]$ ./openshift-install create cluster --log-level debug DEBUG OpenShift Installer v4.2.4 DEBUG Built from commit 425e4ff0037487e32571258640b39f56d5ee5572 DEBUG Fetching "Terraform Variables"... DEBUG Loading "Terraform Variables"... DEBUG Loading "Cluster ID"... DEBUG Loading "Install Config"... DEBUG Loading "SSH Key"... DEBUG Loading "Base Domain"... DEBUG Loading "Platform"... DEBUG Loading "Cluster Name"... DEBUG Loading "Base Domain"... DEBUG Loading "Pull Secret"... DEBUG Loading "Platform"... DEBUG Using "Install Config" loaded from target directory DEBUG Loading "Install Config"... DEBUG Loading "Image"... DEBUG Loading "Install Config"... DEBUG Loading "BootstrapImage"... DEBUG Loading "Install Config"... DEBUG Loading "Bootstrap Ignition Config"... DEBUG Loading "Install Config"... DEBUG Loading "Kubeconfig Admin Client"... DEBUG Loading "Certificate (admin-kubeconfig-client)"... DEBUG Loading "Certificate (admin-kubeconfig-signer)"... DEBUG Loading "Certificate (kube-apiserver-complete-server-ca-bundle)"... DEBUG Loading "Certificate (kube-apiserver-localhost-ca-bundle)"... OUTPUT TRUNCATED&lt;/pre&gt; &lt;p&gt;During the installation, log into the OpenStack dashboard (shown in Figure 3) and you&amp;#8217;ll see that OpenShift IPI takes care of everything; from spawning new instances, to building a dedicated tenant network, configuring security groups, and so on so forth.&lt;/p&gt; &lt;div id="attachment_677587" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281995be9d4.png"&gt;&lt;img aria-describedby="caption-attachment-677587" class="wp-image-677587 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281995be9d4-1024x514.png" alt="The OpenStack dashboard showing the Project -&amp;#62; Compute -&amp;#62; Instances screen." width="640" height="321" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281995be9d4-1024x514.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281995be9d4-300x150.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281995be9d4-768x385.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-677587" class="wp-caption-text"&gt;Figure 3: The OpenStack dashboard lets you watch the installation process in action.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After a while (about 30 minutes) you&amp;#8217;ll have your Red Hat OpenShift 4.2 cluster up and running, as you can see here:&lt;/p&gt; &lt;pre&gt;DEBUG Still waiting for the cluster to initialize: Working towards 4.2.4: 98% complete DEBUG Still waiting for the cluster to initialize: Working towards 4.2.4: 99% complete DEBUG Cluster is initialized INFO Waiting up to 10m0s for the openshift-console route to be created... DEBUG Route found in openshift-console namespace: console DEBUG Route found in openshift-console namespace: downloads DEBUG OpenShift console route is created INFO Install complete! &lt;strong&gt;INFO To access the cluster as the system:admin user when using 'oc', run 'export KUBECONFIG=/home/stack/osd-ocp-demo/auth/kubeconfig'&lt;/strong&gt; &lt;strong&gt;INFO Access the OpenShift web-console here: https://console-openshift-console.apps.ocp4.osd2019.local&lt;/strong&gt; &lt;strong&gt;INFO Login to the console with user: kubeadmin, password: YOURKUBEADMINRANDOMPASSWORD&lt;/strong&gt;&lt;/pre&gt; &lt;p&gt;Looking at OpenStack network topology in Figure 4, you&amp;#8217;ll see the resulting architecture.&lt;/p&gt; &lt;div id="attachment_677607" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281a04ee758.png"&gt;&lt;img aria-describedby="caption-attachment-677607" class="wp-image-677607 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281a04ee758-1024x446.png" alt="The OpenStack dashboard displaying Project -&amp;#62; Network -&amp;#62; Network Toplogy." width="640" height="279" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281a04ee758-1024x446.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281a04ee758-300x131.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281a04ee758-768x334.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-677607" class="wp-caption-text"&gt;Figure 4: Your OpenStack network topology.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You can also use the &lt;code&gt;oc&lt;/code&gt; client from the client machine used to install OpenShift (in my case, it was my undercloud VM):&lt;/p&gt; &lt;pre&gt;(undercloud) [stack@undercloud osd-ocp-demo$ oc get nodes NAME STATUS ROLES AGE VERSION ocp4-4p5fd-master-0 Ready master 9d v1.14.6+c7d2111b9 ocp4-4p5fd-master-1 Ready master 9d v1.14.6+c7d2111b9 ocp4-4p5fd-master-2 Ready master 9d v1.14.6+c7d2111b9 ocp4-4p5fd-worker-76gvc Ready worker 9d v1.14.6+c7d2111b9 ocp4-4p5fd-worker-n6jvq Ready worker 9d v1.14.6+c7d2111b9&lt;/pre&gt; &lt;p&gt;There is only one post-deployment command required in order to attach a pre-allocated floating IP address (FIP) to the Ingress port. Details can be found in the official docs &lt;a href="https://docs.openshift.com/container-platform/4.2/installing/installing_openstack/installing-openstack-installer-custom.html#installation-osp-configuring-api-floating-ip_installing-openstack-installer-custom" target="_blank" rel="noopener noreferrer"&gt;here&lt;/a&gt;. This step is needed because the IPI installer takes care of configuring a Keepalived pod on every master and worker, exposing the virtual IPs (VIPs) that route traffic to internal APIs, the Ingress, and DNS services.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s assign our FIP in order to reach the OpenShift console. We need to assign it to the &lt;code&gt;ingress-port&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;(overcloud) [stack@undercloud osd-ocp-demo]$ openstack port show c3c14e9d-750f-46fb-af9c-e9fd375719b2 +-----------------------+-------------------------------------------------------------------------+ | Field | Value | +-----------------------+-------------------------------------------------------------------------+ | admin_state_up | UP | | allowed_address_pairs | | | binding_host_id | | | binding_profile | | | binding_vif_details | | | binding_vif_type | unbound | | binding_vnic_type | normal | | created_at | 2019-11-01T00:49:21Z | | data_plane_status | None | | description | | | device_id | | | device_owner | | | dns_assignment | None | | dns_name | None | | extra_dhcp_opts | | | fixed_ips | ip_address='10.0.0.7', subnet_id='9cbfdd62-b1e5-4f01-b49c-db992b9afc8e' | | id | &lt;strong&gt;c3c14e9d-750f-46fb-af9c-e9fd375719b2&lt;/strong&gt; | | ip_address | None | | mac_address | fa:16:3e:b8:39:8b | &lt;strong&gt;| name | ocp4-ll4qz-ingress-port |&lt;/strong&gt; | network_id | ec5de4de-2f52-42c5-87bf-35c8d91bd1a7 | | option_name | None | | option_value | None | | port_security_enabled | True | | project_id | 699eeaefb7b84291a75d389ec0f10ea2 | | qos_policy_id | None | | revision_number | 7 | | security_group_ids | 9e6ee5d9-fa19-418c-804e-f1c654d2e34b | | status | DOWN | | subnet_id | None | | tags | openshiftClusterID=ocp4-ll4qz | | trunk_details | None | | updated_at | 2019-11-01T00:49:29Z | +-----------------------+-------------------------------------------------------------------------+ &lt;strong&gt;openstack floating ip set --port c3c14e9d-750f-46fb-af9c-e9fd375719b2 192.168.122.180&lt;/strong&gt;&lt;/pre&gt; &lt;p&gt;Finally, I updated my host file in order to reach OpenShift via FQDN so I didn&amp;#8217;t have to configure a DNS service:&lt;/p&gt; &lt;pre&gt;#ocp4 192.168.122.164 api.ocp4.osd2019.local 192.168.122.180 console-openshift-console.apps.ocp4.osd2019.local 192.168.122.180 integrated-oauth-server-openshift-authentication.apps.ocp4.osd2019.local 192.168.122.180 oauth-openshift.apps.ocp4.osd2019.local 192.168.122.180 prometheus-k8s-openshift-monitoring.apps.ocp4.osd2019.local 192.168.122.180 grafana-openshift-monitoring.apps.ocp4.osd2019.local&lt;/pre&gt; &lt;p&gt;That&amp;#8217;s it. Thirty minutes later, you&amp;#8217;ll have your OpenShift cluster up and running on OpenStack. You can then start playing around to test the capabilities this environment can grant to your organization. See Figure 5 for the results in the Red Hat OpenShift Container Platform.&lt;/p&gt; &lt;div id="attachment_677627" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281a44b51c1.png"&gt;&lt;img aria-describedby="caption-attachment-677627" class="wp-image-677627 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281a44b51c1-1024x559.png" alt="Red Hat OpenShift Container Platform's dashboard." width="640" height="349" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281a44b51c1-1024x559.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281a44b51c1-300x164.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/01/img_5e281a44b51c1-768x419.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-677627" class="wp-caption-text"&gt;Figure 5: Your new cluster in Red Hat OpenShift Container Platform.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Networking deep dive&lt;/h2&gt; &lt;p&gt;As you saw, we preallocated two FIPs within our tenant using the bash script I shared in the section &amp;#8220;L2 nested virtual machines (OpenShift nodes),&amp;#8221; in the lines:&lt;/p&gt; &lt;pre&gt;lbFloatingIP: 192.168.122.164 ingress port floating: 192.168.122.180&lt;/pre&gt; &lt;p&gt;These two FIPS are associated with two Neutron ports, namely &lt;code&gt;api-port&lt;/code&gt; (internal IP 10.0.0.5) and the Ingress port (internal IP 10.0.0.7). The first FIP assignment (192.168.122.164 -&amp;#62; 10.0.0.5) was made automatically by IPI during setup. The second FIP association is, instead, managed by us as we saw previously in order to reach OpenShift console and other services:&lt;/p&gt; &lt;pre&gt;overcloud) [stack@undercloud osd-ocp]$ openstack floating ip list +--------------------------------------+---------------------+------------------+--------------------------------------+--------------------------------------+----------------------------------+ | ID | Floating IP Address | Fixed IP Address | Port | Floating Network | Project | +--------------------------------------+---------------------+------------------+--------------------------------------+--------------------------------------+----------------------------------+ | 87295f6b-75ed-4420-9548-a37d4ae137fc | 192.168.122.164 | 10.0.0.5 | 4ca1d30d-9931-495b-a295-5eba2019293f | 2b122467-8cd0-4159-a176-2a4bc4c2f1e7 | 699eeaefb7b84291a75d389ec0f10ea2 | | 8e47ae70-fb99-4a3b-ad66-314b9e1a5400 | 192.168.122.180 | 10.0.0.7 | a8d54ead-3283-4746-94d1-ef724fcd50f9 | 2b122467-8cd0-4159-a176-2a4bc4c2f1e7 | 699eeaefb7b84291a75d389ec0f10ea2 | +--------------------------------------+---------------------+------------------+--------------------------------------+--------------------------&lt;/pre&gt; &lt;p&gt;Looking at the Neutron ports, we can see that, as suspected, those ports are API and Ingress but they are down. So, how can load balancing work? Take a look at this:&lt;/p&gt; &lt;pre&gt;(overcloud) [stack@undercloud osd-ocp-demo-static-nic]$ openstack port list | grep "api-port\|ingress" | 4ca1d30d-9931-495b-a295-5eba2019293f | ocp4-4p5fd-api-port | fa:16:3e:5b:2b:eb | ip_address='10.0.0.5', subnet_id='c38b6eb3-0dc3-41ec-915e-e7c365bcb0a0' | DOWN | | a8d54ead-3283-4746-94d1-ef724fcd50f9 | ocp4-4p5fd-ingress-port | fa:16:3e:dc:b7:1b | ip_address='10.0.0.7', subnet_id='c38b6eb3-0dc3-41ec-915e-e7c365bcb0a0' | DOWN |&lt;/pre&gt; &lt;p&gt;Those ports are not attached to an instance. Instead, they are created on the tenant network to be used by OpenShift to allocate VIPs via Keepalived or the Virtual Router Redundancy Protocol (VRRP) in order to load balance the internal services (API and DNS) exposed by masters and the Ingress requests exposed by workers (ingress pod = OpenShift router).&lt;/p&gt; &lt;p&gt;Digging into our OpenShift setup, the project &lt;code&gt;openshift-openstack-infra&lt;/code&gt; contains three &lt;code&gt;haproxy&lt;/code&gt; and three &lt;code&gt;keepalived&lt;/code&gt; pods running on masters plus two &lt;code&gt;keepalived&lt;/code&gt; running on workers:&lt;/p&gt; &lt;pre&gt;(overcloud) [stack@undercloud osd-ocp-demo-static-nic]$ oc get pods -n openshift-openstack-infra NAME READY STATUS RESTARTS AGE coredns-ocp4-4p5fd-master-0 1/1 Running 0 9d coredns-ocp4-4p5fd-master-1 1/1 Running 0 9d coredns-ocp4-4p5fd-master-2 1/1 Running 0 9d coredns-ocp4-4p5fd-worker-76gvc 1/1 Running 1 9d coredns-ocp4-4p5fd-worker-n6jvq 1/1 Running 0 9d &lt;strong&gt;haproxy-ocp4-4p5fd-master-0 2/2 Running 2 9d&lt;/strong&gt; &lt;strong&gt;haproxy-ocp4-4p5fd-master-1 2/2 Running 0 9d&lt;/strong&gt; &lt;strong&gt;haproxy-ocp4-4p5fd-master-2 2/2 Running 0 9d&lt;/strong&gt; &lt;strong&gt;keepalived-ocp4-4p5fd-master-0 1/1 Running 0 9d&lt;/strong&gt; &lt;strong&gt;keepalived-ocp4-4p5fd-master-1 1/1 Running 0 9d&lt;/strong&gt; &lt;strong&gt;keepalived-ocp4-4p5fd-master-2 1/1 Running 0 9d&lt;/strong&gt; &lt;strong&gt;keepalived-ocp4-4p5fd-worker-76gvc 1/1 Running 1 9d&lt;/strong&gt; &lt;strong&gt;keepalived-ocp4-4p5fd-worker-n6jvq 1/1 Running 0 9d&lt;/strong&gt; mdns-publisher-ocp4-4p5fd-master-0 1/1 Running 0 9d mdns-publisher-ocp4-4p5fd-master-1 1/1 Running 0 9d mdns-publisher-ocp4-4p5fd-master-2 1/1 Running 0 9d mdns-publisher-ocp4-4p5fd-worker-76gvc 1/1 Running 1 9d mdns-publisher-ocp4-4p5fd-worker-n6jvq 1/1 Running 0 9d&lt;/pre&gt; &lt;p&gt;Looking at one of these pods running on master nodes, we can see that Keepalived was configured to use the VRRP protocol to expose three VIPs:&lt;/p&gt; &lt;pre&gt;(overcloud) [stack@undercloud osd-ocp-demo]$ oc rsh keepalived-ocp4-4p5fd-master-0 sh-4.2# cat /etc/keepalived/keepalived.conf | grep -A1 ipaddress virtual_ipaddress { 10.0.0.5/16 -- virtual_ipaddress { 10.0.0.6/16 -- virtual_ipaddress { 10.0.0.7/16&lt;/pre&gt; &lt;p&gt;For instance, in order to route Ingress traffic to internal API ports, there is a VRRP instance with a VIP assigned (10.0.0.5):&lt;/p&gt; &lt;pre&gt;vrrp_instance ocp4_API { state BACKUP interface ens3 virtual_router_id 29 priority 40 advert_int 1 authentication { auth_type PASS auth_pass ocp4_api_vip } virtual_ipaddress { 10.0.0.5/16 } track_script { chk_ocp } }&lt;/pre&gt; &lt;p&gt;Looking at the &lt;code&gt;haproxy&lt;/code&gt; pod on the master, we can see that it listens on port 7443 on all IPs, and that it balances the API calls to the masters&amp;#8217; nodes (section backend masters):&lt;/p&gt; &lt;pre&gt;(overcloud) [stack@undercloud osd-ocp-demo]$ oc rsh haproxy-ocp4-4p5fd-master-0 sh-4.2$ cat /etc/haproxy/haproxy.cfg defaults maxconn 20000 mode tcp log /var/run/haproxy/haproxy-log.sock local0 option dontlognull retries 3 timeout http-keep-alive 10s timeout http-request 1m timeout queue 1m timeout connect 10s timeout client 86400s timeout server 86400s timeout tunnel 86400s frontend main bind :7443 default_backend masters listen health_check_http_url bind :50936 mode http monitor-uri /healthz option dontlognull listen stats bind 127.0.0.1:50000 mode http stats enable stats hide-version stats uri /haproxy_stats stats refresh 30s stats auth Username:Password backend masters option httpchk GET /healthz HTTP/1.0 option log-health-checks balance roundrobin server etcd-0.ocp4.osd2019.local. 10.0.0.11:6443 weight 1 verify none check check-ssl inter 3s fall 2 rise 3 server etcd-2.ocp4.osd2019.local. 10.0.0.18:6443 weight 1 verify none check check-ssl inter 3s fall 2 rise 3 server etcd-1.ocp4.osd2019.local. 10.0.0.26:6443 weight 1 verify none check check-ssl inter 3s fall 2 rise 3&lt;/pre&gt; &lt;p&gt;Logging via SSH to the CoresOS node (&lt;code&gt;master-0&lt;/code&gt;) to double-check, we can see that &lt;code&gt;haproxy&lt;/code&gt; is listening on port 7443:&lt;/p&gt; &lt;pre&gt;root@ocp4-4p5fd-master-0 ~]# netstat -anop | grep 0.0.0.0:7443 tcp 0 0 0.0.0.0:7443 0.0.0.0:* LISTEN 336621/haproxy off (0.00/0/0)&lt;/pre&gt; &lt;p&gt;The VIP (10.0.0.5) instead is assigned right now to master-2 node which is the master from a Keepalived perspective:&lt;/p&gt; &lt;pre&gt;root@ocp4-4p5fd-master-1 /]# ip a | grep 10.0.0.5 inet 10.0.0.5/16 scope global secondary ens3&lt;/pre&gt; &lt;p&gt;What is missing? If the API and Ingress port on Neutron are down, how does this setup work? It works because on the Neutron ports assigned to masters and workers, keepalive VIPs are allowed from a port security perspective.&lt;/p&gt; &lt;p&gt;Need to disable anti-MAC spoofing only for particular IPs/MACs? This setting allows incoming traffic from different IPs on the same Neutron port:&lt;/p&gt; &lt;pre&gt;(overcloud) [stack@undercloud osd-ocp-demo-static-nic]$ neutron port-show e3c60257-1877-45c4-8cae-492ef953207f neutron CLI is deprecated and will be removed in the future. Use openstack CLI instead. +-----------------------+-----------------------------------------------------------------------------------+ | Field | Value | +-----------------------+-----------------------------------------------------------------------------------+ | admin_state_up | True | | allowed_address_pairs | {"ip_address": "10.0.0.5", "mac_address": "fa:16:3e:25:f2:fe"} | | | {"ip_address": "10.0.0.6", "mac_address": "fa:16:3e:25:f2:fe"} | | | {"ip_address": "10.0.0.7", "mac_address": "fa:16:3e:25:f2:fe"} |&lt;/pre&gt; &lt;p&gt;Need to summarize the traffic flow for incoming API traffic? It looks like this:&lt;/p&gt; &lt;pre&gt;192.168.122.164 -&amp;#62; MASTER-2 NODE (holding keepalived VIP) -&amp;#62; master-2 haproxy pod -&amp;#62; load balancing to other pods&lt;/pre&gt; &lt;p&gt;To summarize Ingress traffic flow for incoming HTTP/HTTPS requests:&lt;/p&gt; &lt;pre&gt;192.168.122.180 -&amp;#62; Worker-node (holding keepalived VIP for ingress)  -&amp;#62; console pods, prometheus pods, etc&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This &lt;a href="https://github.com/openshift/installer/blob/master/docs/design/openstack/networking-infrastructure.md" target="_blank" rel="noopener noreferrer"&gt;page&lt;/a&gt; explains IPI networking infrastructure with a good level of detail.&lt;/p&gt; &lt;p&gt;In addition, I have also tried adding OpenStack Neutron ports to OpenShift nodes and attaching a provider network in order to have a dedicated management network with static IP/routes. Unfortunately, I was not able to accomplish this goal because IPI&amp;#8217;s goal is to provide an opinionated setup. Instead, when User-Provisioned Infrastructure (UPI) is available for Red Hat OpenStack, this addition will give us this option.&lt;/p&gt; &lt;h2&gt;Demo&lt;/h2&gt; &lt;p&gt;Here is the demo video we recorded with my colleague Rinaldo Bergamini. It shows OpenShift IPI installation, in a practical way.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/GxoWSpQX0Fo?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F06%2Fred-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204.2%20IPI%20on%20OpenStack%2013%3A%20All-in-one%20setup" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F06%2Fred-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204.2%20IPI%20on%20OpenStack%2013%3A%20All-in-one%20setup" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F06%2Fred-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204.2%20IPI%20on%20OpenStack%2013%3A%20All-in-one%20setup" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F06%2Fred-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204.2%20IPI%20on%20OpenStack%2013%3A%20All-in-one%20setup" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F06%2Fred-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204.2%20IPI%20on%20OpenStack%2013%3A%20All-in-one%20setup" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F06%2Fred-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204.2%20IPI%20on%20OpenStack%2013%3A%20All-in-one%20setup" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F06%2Fred-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204.2%20IPI%20on%20OpenStack%2013%3A%20All-in-one%20setup" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F06%2Fred-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup%2F&amp;#038;title=Red%20Hat%20OpenShift%204.2%20IPI%20on%20OpenStack%2013%3A%20All-in-one%20setup" data-a2a-url="https://developers.redhat.com/blog/2020/02/06/red-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup/" data-a2a-title="Red Hat OpenShift 4.2 IPI on OpenStack 13: All-in-one setup"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/06/red-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup/"&gt;Red Hat OpenShift 4.2 IPI on OpenStack 13: All-in-one setup&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/yPfQWPtfzAk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Months ago, a customer asked me about Red Hat OpenShift on OpenStack, especially regarding the network configuration options available in OpenShift at the node level. In order to give them an answer and increase my confidence on $topic, I&amp;#8217;ve considered how to test this scenario. At the same time, the Italian solution architect &amp;#8220;Top Gun [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/06/red-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup/"&gt;Red Hat OpenShift 4.2 IPI on OpenStack 13: All-in-one setup&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">656047</post-id><dc:creator>Michele Naldini</dc:creator><dc:date>2020-02-06T08:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/06/red-hat-openshift-4-2-ipi-on-openstack-13-all-in-one-setup/</feedburner:origLink></entry><entry><title>Keycloak 8.0.2 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/LL8HRo4YG0E/keycloak-802-released.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><category term="Keycloak Release" scheme="searchisko:content:tags" /><author><name>Keycloak</name></author><id>searchisko:content:id:jbossorg_blog-keycloak_8_0_2_released</id><updated>2020-02-06T00:00:00Z</updated><published>2020-02-06T00:00:00Z</published><content type="html">&lt;p&gt;To download the release go to &lt;a href="https://www.keycloak.org/downloads.html"&gt;Keycloak downloads&lt;/a&gt;.&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_highlights"&gt;Highlights&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="sect2"&gt; &lt;h3 id="_samesite_cookie_changes_with_upcoming_google_chrome_update"&gt;SameSite cookie changes with upcoming Google Chrome update&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Starting with version 80, Google Chrome will change the default value for the &lt;code&gt;SameSite&lt;/code&gt; cookie parameter to &lt;code&gt;Lax&lt;/code&gt;. Therefore, changes were required to several Keycloak cookies (especially those which are used within the Javascript adapter for checking the session status using the iframe) to set &lt;code&gt;SameSite&lt;/code&gt; parameter to &lt;code&gt;None&lt;/code&gt;. Please note that this settings also requires setting the &lt;code&gt;Secure&lt;/code&gt; parameter, hence starting with this version, the Javascript adapter will only be fully functional when using the SSL / TLS connection on the Keycloak side.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;h2&gt;All resolved issues&lt;/h2&gt; &lt;p&gt;The full list of resolved issues are available in &lt;a href="https://issues.jboss.org/issues/?jql=project%20%3D%20keycloak%20and%20fixVersion%20%3D%208.0.2"&gt;JIRA&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Upgrading&lt;/h2&gt; &lt;p&gt;Before you upgrade remember to backup your database and check the &lt;a href="https://www.keycloak.org/docs/latest/upgrading/index.html"&gt;upgrade guide&lt;/a&gt; for anything that may have changed.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/LL8HRo4YG0E" height="1" width="1" alt=""/&gt;</content><summary>To download the release go to Keycloak downloads. Highlights SameSite cookie changes with upcoming Google Chrome update Starting with version 80, Google Chrome will change the default value for the SameSite cookie parameter to Lax. Therefore, changes were required to several Keycloak cookies (especially those which are used within the Javascript adapter for checking the session status using the if...</summary><dc:creator>Keycloak</dc:creator><dc:date>2020-02-06T00:00:00Z</dc:date><feedburner:origLink>https://www.keycloak.org/2020/02/keycloak-802-released.html</feedburner:origLink></entry><entry><title>Customizing OpenShift project creation</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Vife_RcU9EM/" /><category term="Containers" /><category term="DevOps" /><category term="Modern App Dev" /><category term="customize default project" /><category term="openshift" /><category term="projectRequestTemplate" /><author><name>Rarm Nagalingam</name></author><id>https://developers.redhat.com/blog/?p=673297</id><updated>2020-02-05T08:00:42Z</updated><published>2020-02-05T08:00:42Z</published><content type="html">&lt;p&gt;I recently attended an excellent training run by Red Hat’s Global Partner Enablement Team on advanced &lt;a href="http://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt; management. One of the most interesting elements of the training was how to customize default project creation. This article explains how to use OpenShift&amp;#8217;s &lt;code&gt;projectRequestTemplate&lt;/code&gt; to add default controls for the resources that a project is allowed to consume.&lt;/p&gt; &lt;p&gt;&lt;span id="more-673297"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;First, a little bit of background. OpenShift projects are synonymous with Kubernetes namespaces and are used to isolate objects between projects. By default, users who are authenticated can create projects and consume resources up to the global &lt;code&gt;ClusterResource&lt;/code&gt; limits. As a cluster administrator, you might want to add new default limits around the number of resources that can be consumed by a project. OpenShift provides a mechanism to achieve this setting by creating a template that is referenced by the &lt;code&gt;projectRequestTemplate&lt;/code&gt; parameter in OpenShift’s project configuration resource.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can read more about this feature in the official documentation in &lt;a href="https://docs.openshift.com/container-platform/4.2/applications/projects/configuring-project-creation.html" target="_blank" rel="noopener noreferrer"&gt;configuring-project-creation&lt;/a&gt;. However, the default documentation can be lacking if you haven’t created or modified templates before.&lt;/p&gt; &lt;p&gt;This example outlines how to obtain a project creation template schema, and how to configure it to set default project limits and default container limits. For our example, the project limits for our example look like this:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Use a maximum of 10 pods.&lt;/li&gt; &lt;li&gt;Limit each project to six CPUs.&lt;/li&gt; &lt;li&gt;Limit each project to 16GiB of RAM.&lt;/li&gt; &lt;li&gt;Set a request for a project to four CPUs.&lt;/li&gt; &lt;li&gt;Set a request for a project to 8GiB of RAM.&lt;/li&gt; &lt;li&gt;Set a request for 20GB of persistent storage.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The container limits for our example look like this:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Limit each container to one CPU.&lt;/li&gt; &lt;li&gt;Limit each container to 1GiB of RAM.&lt;/li&gt; &lt;li&gt;Set a default request for 500 milliCPU.&lt;/li&gt; &lt;li&gt;Set a default request for 500MiB of RAM.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; To understand more about limits and quotas, read &lt;a href="https://docs.openshift.com/container-platform/4.2/applications/quotas/quotas-setting-per-project.html" target="_blank" rel="noopener noreferrer"&gt;quotas-setting-per-project&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Before we can customize the template we need to obtain a schema. Run the following command as a user with &lt;code&gt;cluster-admin&lt;/code&gt; permissions:&lt;/p&gt; &lt;pre&gt;$ oc adm create-bootstrap-project-template -o yaml &amp;#62; template.yaml&lt;/pre&gt; &lt;h2&gt;Customize the template&lt;/h2&gt; &lt;p&gt;Looking at the default template, you can see that it is bare-bones and only contains particular settings, such as &lt;code&gt;NAME&lt;/code&gt;, &lt;code&gt;DISPLAYNAME&lt;/code&gt;, &lt;code&gt;DESCRIPTION&lt;/code&gt;, &lt;code&gt;ADMIN_USER&lt;/code&gt;, and &lt;code&gt;REQUESTING_USER&lt;/code&gt;, along with establishing sane role-based access controls (RBACs):&lt;/p&gt; &lt;pre&gt;apiVersion: template.openshift.io/v1 kind: Template metadata: creationTimestamp: null name: project-request objects: - apiVersion: project.openshift.io/v1 kind: Project metadata: annotations: openshift.io/description: ${PROJECT_DESCRIPTION} openshift.io/display-name: ${PROJECT_DISPLAYNAME} openshift.io/requester: ${PROJECT_REQUESTING_USER} creationTimestamp: null name: ${PROJECT_NAME} spec: {} status: {} - apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: creationTimestamp: null name: admin namespace: ${PROJECT_NAME} roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: admin subjects: - apiGroup: rbac.authorization.k8s.io kind: User name: ${PROJECT_ADMIN_USER} parameters: - name: PROJECT_NAME - name: PROJECT_DISPLAYNAME - name: PROJECT_DESCRIPTION - name: PROJECT_ADMIN_USER - name: PROJECT_REQUESTING_USER &lt;/pre&gt; &lt;p&gt;The important part when customizing this template is adding objects such as &lt;code&gt;ResourceQuota&lt;/code&gt; and &lt;code&gt;LimitRange&lt;/code&gt; under the &lt;code&gt;objects&lt;/code&gt; stanza. First, craft the &lt;code&gt;ResourceQuota&lt;/code&gt; and &lt;code&gt;LimitRange&lt;/code&gt; as you would normally:&lt;/p&gt; &lt;pre&gt;- apiVersion: v1 kind: "LimitRange" metadata: name: project-limits spec: limits: - type: "Container" default: cpu: "1" memory: "1Gi" defaultRequest: cpu: "500m" memory: "500Mi" - apiVersion: v1 kind: ResourceQuota metadata: name: project-quota spec: hard: pods: "10" requests.cpu: "4" requests.memory: 8Gi limits.cpu: "6" limits.memory: 16Gi requests.storage: "20G" &lt;/pre&gt; &lt;p&gt;Now, add &lt;code&gt;ResourceQuota&lt;/code&gt; and &lt;code&gt;LimitRange&lt;/code&gt; objects under the &lt;code&gt;objects&lt;/code&gt; section of the template. In this example, I have modified the name for each object by dynamically include the project name:&lt;/p&gt; &lt;pre&gt;apiVersion: template.openshift.io/v1 kind: Template metadata: creationTimestamp: null name: project-request objects: - apiVersion: project.openshift.io/v1 kind: Project metadata: annotations: openshift.io/description: ${PROJECT_DESCRIPTION} openshift.io/display-name: ${PROJECT_DISPLAYNAME} openshift.io/requester: ${PROJECT_REQUESTING_USER} creationTimestamp: null name: ${PROJECT_NAME} spec: {} status: {} - apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: creationTimestamp: null name: admin namespace: ${PROJECT_NAME} roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: admin subjects: - apiGroup: rbac.authorization.k8s.io kind: User name: ${PROJECT_ADMIN_USER} - apiVersion: v1 kind: "LimitRange" metadata: name: ${PROJECT_NAME}-limits spec: limits: - type: "Container" default: cpu: "1" memory: "1Gi" defaultRequest: cpu: "500m" memory: "500Mi" - apiVersion: v1 kind: ResourceQuota metadata: name: ${PROJECT_NAME}-quota spec: hard: pods: "10" requests.cpu: "4" requests.memory: 8Gi limits.cpu: "6" limits.memory: 16Gi requests.storage: "20G" parameters: - name: PROJECT_NAME - name: PROJECT_DISPLAYNAME - name: PROJECT_DESCRIPTION - name: PROJECT_ADMIN_USER - name: PROJECT_REQUESTING_USER &lt;/pre&gt; &lt;p&gt;The next step is installing the config into the &lt;code&gt;openshift-config&lt;/code&gt; project:&lt;/p&gt; &lt;pre&gt;$ oc create -f template.yaml -n openshift-config&lt;/pre&gt; &lt;p&gt;After this, associate the template with &lt;code&gt;projectRequestTemplate&lt;/code&gt; in the project resource of the &lt;code&gt;config.openshift.io/v1&lt;/code&gt;. Run the following command to edit the config:&lt;/p&gt; &lt;pre&gt;$ oc edit project.config.openshift.io/cluster&lt;/pre&gt; &lt;p&gt;Within the text editor, set the config spec to include the name for your template under &lt;code&gt;projectRequestTemplate&lt;/code&gt;. The name of our template itself was &lt;code&gt;project-request&lt;/code&gt;. Therefore, under the spec section, we would add:&lt;/p&gt; &lt;pre&gt;apiVersion: config.openshift.io/v1 kind: Project metadata: ... spec: projectRequestTemplate: name: project-request &lt;/pre&gt; &lt;h2&gt;&lt;strong&gt;Confirm that the template works&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;The last step is to test your configuration. Keep in mind that the project creation template only applies to projects created after the template was installed and associated with the &lt;code&gt;projectRequestTemplate&lt;/code&gt;. Previously created projects will not be modified:&lt;/p&gt; &lt;pre&gt;$ oc new-project test ... $ oc describe project test Name: test Created: 40 seconds ago ... Quota: Name: test-quota Resource Used Hard -------- ---- ---- limits.cpu 0 6 limits.memory 0 16Gi pods 0 10 requests.cpu 0 4 requests.memory 0 8Gi requests.storage 0 20G Resource limits: Name: test-limits Type Resource Min Max Default Request Default Limit Max Limit/Request Ratio ---- -------- --- --- --------------- ------------- ----------------------- Container cpu - - 500m 1 - Container memory - - 500Mi 1Gi - &lt;/pre&gt; &lt;p&gt;The output above confirms that the quota and resource limits have automatically been applied to the project.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F05%2Fcustomizing-openshift-project-creation%2F&amp;#38;linkname=Customizing%20OpenShift%20project%20creation" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F05%2Fcustomizing-openshift-project-creation%2F&amp;#38;linkname=Customizing%20OpenShift%20project%20creation" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F05%2Fcustomizing-openshift-project-creation%2F&amp;#38;linkname=Customizing%20OpenShift%20project%20creation" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F05%2Fcustomizing-openshift-project-creation%2F&amp;#38;linkname=Customizing%20OpenShift%20project%20creation" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F05%2Fcustomizing-openshift-project-creation%2F&amp;#38;linkname=Customizing%20OpenShift%20project%20creation" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F05%2Fcustomizing-openshift-project-creation%2F&amp;#38;linkname=Customizing%20OpenShift%20project%20creation" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F05%2Fcustomizing-openshift-project-creation%2F&amp;#38;linkname=Customizing%20OpenShift%20project%20creation" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F05%2Fcustomizing-openshift-project-creation%2F&amp;#038;title=Customizing%20OpenShift%20project%20creation" data-a2a-url="https://developers.redhat.com/blog/2020/02/05/customizing-openshift-project-creation/" data-a2a-title="Customizing OpenShift project creation"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/05/customizing-openshift-project-creation/"&gt;Customizing OpenShift project creation&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Vife_RcU9EM" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I recently attended an excellent training run by Red Hat’s Global Partner Enablement Team on advanced Red Hat OpenShift management. One of the most interesting elements of the training was how to customize default project creation. This article explains how to use OpenShift&amp;#8217;s projectRequestTemplate to add default controls for the resources that a project is [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/05/customizing-openshift-project-creation/"&gt;Customizing OpenShift project creation&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">673297</post-id><dc:creator>Rarm Nagalingam</dc:creator><dc:date>2020-02-05T08:00:42Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/05/customizing-openshift-project-creation/</feedburner:origLink></entry></feed>
